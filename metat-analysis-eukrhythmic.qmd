---
title: "eukrhythmic output"
format: html
editor: visual
execute:
  eval: false
---

*last updated ARCHIVE*

# Introduction

Code for processing metatranscriptome files processed with [eukrhythmic](https://eukrhythmic.readthedocs.io/en/latest/index.html). Data originates from several vent sites for project 'Microbes need frenemies'.

## Set up environment

```{r}
# | warning: false
# | message: false
library(tidyverse)
library(DESeq2)
library(tximport)
library(data.table)
```

## Create eukrhythmic sample list

Import .csv files for all samples names.

```{r}
#| echo: false
sample_list <- read.csv("input-docs/frenemies-sample-list.csv")
fastq_list <- read.csv("input-docs/frenemies-fastq-list.csv", header = FALSE)
```

Fastq files were run on both lanes 1 and 2. So will treat as *technical* replicates for now. Separate fastq_list file so we can left join the sample_list information.

For assembly groupings, we want diversity represented, but too much diversity may cause chimeric contigs. And if we put in too many reads, this can be a bottleneck for assembly (computationally).

Here, we decided to separate by vent field, sample type (vent vs. non-vent), and if there were many vents (like in the MCR sites), each vent was split into it's own assembly. Based on the 18S analysis, we know that vents even meters apart from one another can have very distinct and diverse communities. For the MCR work, some of the vent (in situ) samples were paired with shipboard grazing assays. These are assembled with the vent samples (as the original fluid was the same) and represent time final for the grazing experiments.

```{r}
# head(fastq_list)
# Create sample list for eukrhythmic input
sample_list_wassemblygroup <- fastq_list %>% 
  mutate(FastqFile = str_remove_all(V1, "_R1_001.fastq.gz"),
         SampleName = str_remove_all(FastqFile, "_S\\d+_L00\\d+")) %>% 
  left_join(sample_list %>% select(SampleName = SITE_NUM_FIELDYR_VENT_EXP_SAMPLEID, SAMPLEID, everything())) %>% 
  mutate(VENT = case_when(
    VENT == "Mustard Stand" ~ "MustardStand",
    TRUE ~ VENT
  )) %>% 
  mutate(TYPE = case_when( #Option to use casewhen for setting assembly grouping
  grepl("Plume", VENT) ~ "nonvent",
  grepl("plume", VENT) ~ "nonvent",
  grepl("Plus30m", VENT) ~ "nonvent",
  grepl("BSW", VENT) ~ "nonvent",
  grepl("Background", VENT) ~ "nonvent",
  grepl("Transit", VENT) ~ "nonvent",
  TRUE ~ "vent"
    )) %>%
  mutate(FIELD = case_when(
    FIELDYR == "VonDamm2020" ~ "VONDAMM",
    FIELDYR == "Piccard2020" ~ "PICCARD",
    TRUE ~ SITE
  )) %>% 
  mutate(AXIAL_CORR = case_when(
    grepl("IntlDistrict", VENT) ~ "IntlDistrict",
    grepl("ASHES", VENT) ~ "ASHES",
    grepl("Transit", VENT) ~ "Background",
    TRUE ~ VENT
  )) %>% 
  mutate(AssemblyGroup = case_when(
    SITE == "MCR" ~ paste(FIELD, VENT, TYPE, sep = "_"),
    SITE == "GR" ~ paste(FIELD, FIELDYR, TYPE, sep = "_"),
    SITE == "AXIAL" ~ paste(FIELD, AXIAL_CORR, TYPE, sep = "_")
  )) %>% 
  # unite("AssemblyGroup", c(FIELD, EXP, TYPE), remove = FALSE) %>% 
  mutate(SampleID = SampleName) %>% 
  select(SampleName, SampleID, AssemblyGroup, FastqFile, NUMBER = LAB_NUM, FIELD, SITE, FIELDYR, VENT, EXP, TYPE, SAMPLE_NAME, ORIGIN, SAMPLEID)
#SITE_NUM_FIELDYR_VENT_EXP_SAMPLEID
table(sample_list_wassemblygroup$AssemblyGroup)
# View(sample_list_wassemblygroup)
```

```{r}
# write_delim(sample_list_wassemblygroup %>% select(SampleName, SampleID, AssemblyGroup, FastqFile), file = "eukrhythmic-run/frenemies-metat-samplelist.txt", delim = "\t")
```

# Running eukrhythmic

> AKQ - need assistance here for additional instructions specific to this project for eukrhythmic. Including annotation stuff.

Location on TAMU HPRC: `/scratch/group/hu-lab/frenemies`

# Output from eukrhythmic

-   Salmon count files, `quant.sf`.
-   TaxonomicAndFunctionalAnnotations.csv

> Specific steps taken to create the above?

## Process counts with tximport

First run `scripts/create-samplelist.R`. This will output a sample list ready to be run with the tximport step.

Then execute `scripts/run_tximport_frenemies.R`. This will import all salmon count files and process transcript length to get transcript-level estimates as counts. With slurm script: `sbatch metaT-run-tximport.sm`.

Output from above includes 2 RData files. `tximport-feb-2025.RData` is a txi class objects for the MCR and GR data and `dfs_gr_mcr_feb2025.RData` has large dataframes with the TPM values from the txi objects.

File location:

```         
#save(txi_frenemies_mcr_gr, sample_merged_gr_mcr, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-feb-2025.RData")
#save(lenscaled_TPM, gr_mcr_lenscaled_TPM_df, mean_gr_mcr_TPM_df, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/dfs_gr_mcr_feb2025.RData")
```

The goal is to get a table with samples that reflects the *lengthScaledTPM*. This is calculated using *tximport*, where the the within-gene summed TPM is multiplied by the average transcript length, averaged over samples, then scaled up to the per-sample library size.

The output can be treated as a *TPM* that has been corrected for differences in average transcript length across samples.

# Process large count files

From `dfs_gr_mcr_feb2025.RData` we need to create downstream files that can be more easily used in R locally.

## Align with annotation information

Use script `frenemies-compile-dfs_FEB.R`

```{r}
# Compile large datasets for use in R. 
library(data.table)
library(tximport)
library(readr)
library(tidyverse)

cat("Importing files\n")
load("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/dfs_gr_mcr_feb2025.RData", verbose = TRUE)
# lenscaled_TPM, gr_mcr_lenscaled_TPM_df, mean_gr_mcr_TPM_df

taxfxn <- read.table("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/TaxonomicAndFunctionalAnnotations.csv", header = TRUE, sep = "\t")

tx2gene_in <- taxfxn %>% 
  separate_longer_delim(KEGG_ko, delim = ",") %>% # Remove comma separated KEGG IDs
  select(SequenceID, seed_ortholog, COG_category, GOs, KEGG = KEGG_ko, PFAMs, classification_level, full_classification, classification, max_pid) %>% 
  dplyr::mutate(SEQ_ID = stringr::str_remove(SequenceID, ".p[:digit:]$"))

cat("Modified taxfxn:\n")
head(tx2gene_in)
# head(rownames(mean_gr_mcr_TPM_df))

cat("Files imported.\n")

cat("View mean_gr_mcr_TPM_df\n\n")
head(mean_gr_mcr_TPM_df)

cat("Pivot to long format:\n")
# Make longer data frame
long_frenemies <- mean_gr_mcr_TPM_df %>%
  rowwise() %>%
  # Add column with number of samples with a 0.
  mutate(NUM_ZERO = sum(c_across(starts_with("mean.")) == 0)) %>%
  rownames_to_column(var = "SEQ_ID") %>%
  pivot_longer(cols = starts_with("mean"), values_to = "scaledTPM") %>%
  # Remove zeroes
  filter(scaledTPM > 0) %>%
  separate(name, c("meanfield", "LIBRARY_NUM", "fieldyear", "LOCATION", "SAMPLETYPE", "SAMPLEID"), "_",
           remove = FALSE) %>%
  # Isolate the in situ samples only
  filter(SAMPLETYPE == "insitu") %>% 
  select(-meanfield, -name) %>%
  mutate(VENT_FIELD = case_when(grepl("Piccard", fieldyear) ~ "Piccard",
                                grepl("VonDamm", fieldyear) ~ "Von Damm",
                                grepl("Axial", fieldyear) ~ "Axial",
                                grepl("Gorda", fieldyear) ~ "Gorda Ridge")) %>%
  mutate(VENT_BIN = case_when(
    (LOCATION == "Background" | LOCATION == "Plume" | LOCATION == "BSW") ~ "Non-vent",
    grepl("IntlDistrict", LOCATION) ~ "Non-vent",
    grepl("ASHES", LOCATION) ~ "Non-vent",
    TRUE ~ "Vent"
  ))



# Add in annotations, revise taxa
as_is <- c("Amoebozoa", "Apusozoa", "Excavata", "Hacrobia", "Archaeplastida")

# head(mean_gr_mcr_TPM_df)
# head(taxfxn)

long_frenemies_annot <- long_frenemies %>%
  left_join(taxfxn, by = "SEQ_ID") %>%
  separate(full_classification, c("Domain", "Supergroup", "Phylum", "Class", "Order", "Family", "Genus_spp"), sep = "; ", remove = FALSE) %>%
  mutate(SUPERGROUP_18S = case_when(
    Phylum == "Ciliophora" ~ "Alveolata-Ciliophora",
    Phylum == "Dinophyta" ~ "Alveolata-Dinoflagellata",
    # Phylum == "Perkinsea" ~ "Protalveolata",
    # Phylum == "Colponemidia" ~ "Protalveolata",
    # Phylum == "Chromerida" ~ "Protalveolata",
    Supergroup == "Alveolata" ~ "Other Alveolata",
    Supergroup %in% as_is ~ Supergroup,
    Supergroup == "Haptista" ~ "Hacrobia",
    Phylum == "Radiolaria" ~ "Rhizaria-Radiolaria",
    Phylum == "Cercozoa" ~ "Rhizaria-Cercozoa",
    (Supergroup == "Rhizaria" & Phylum != "Radiolaria" & Phylum != "Cercozoa") ~ "Rhizaria",
    Order == "Bigyra" ~ "Stramenopiles-Opalozoa;Sagenista",
    Class == "Ochromonadales" ~ "Stramenopiles-Ochrophyta",
    Supergroup == "Stramenopiles" ~ "Stramenopiles",
    Supergroup == "Opisthokonta" ~ "Opisthokonta",
    (is.na(Supergroup) | Supergroup == "Eukaryota incertae sedis") ~ "Unknown Eukaryota",
    TRUE ~ "Other-metaT only"))

cat("Completed data anneal, output:\n")

head(long_frenemies_annot)

# Save output R object files
save(long_frenemies, long_frenemies_annot, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/frenemies-longdfs-gr-mcr.RData")
cat("SAVED\n")

cat("switching to making matrices for use:")
# head(mean_gr_mcr_TPM_df)
# head(long_frenemies)
matrix_frenemies <- long_frenemies %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_") %>% 
  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification) %>% 
  distinct() %>% 
  group_by(SEQ_ID, SAMPLE_NAME) %>% 
    summarise(SUM_TPM = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %>% 
  as.matrix

matrix_frenemies_ventonly <- long_frenemies %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_") %>% 
  filter(VENT_BIN = "Vent") %>% 
  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification) %>% 
  distinct() %>% 
  group_by(SEQ_ID, SAMPLE_NAME) %>% 
  summarise(SUM_TPM = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %>% 
  as.matrix

matrix_frenemies_ciliates <- long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_") %>% 
  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification, SUPERGROUP_18S) %>% 
  distinct() %>% 
  group_by(SEQ_ID, SAMPLE_NAME) %>% 
    summarise(SUM_TPM = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %>% 
  as.matrix

matrix_frenemies_ciliates_ventonly <- long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  filter(VENT_BIN = "Vent") %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_") %>% 
  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification, SUPERGROUP_18S) %>% 
  distinct() %>% 
  group_by(SEQ_ID, SAMPLE_NAME) %>% 
  summarise(SUM_TPM = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %>% 
  as.matrix

# Ciliate taxa key
# head(long_frenemies_annot)
key_taxa <- long_frenemies_annot %>% 
  select(SEQ_ID, full_classification, SUPERGROUP_18S) %>% 
  distinct() %>% 
  separate(full_classification, c("Domain", "Supergroup", "Phylum", "Class", "Order", "Family", "Genus_spp"), sep = "; ", remove = FALSE)

cat("Saving data files:\n")
save(matrix_frenemies, matrix_frenemies_ventonly, key_taxa, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/matrix_frenemies.RData")

save(matrix_frenemies_ciliates, matrix_frenemies_ciliates_ventonly, key_taxa, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/matrix_ciliates_frenemies.RData")
  

```

## Process in DESeq

(a) Use tximport function to subset to data of interest.

(b) Use sample list, ensure sample names are synced. This sample list has the column metadata for DESeq input "design"

(c) Use DESeq's `DESeqDataSetFromTximport()` to import data of interest.

(d) Perform transcript subsetting, so that transcripts should appear in more than 1 sample and have a total sum greater than 10. Also include a step to deal with zeroes by calculating a modified geometric mean (poscounts)

(e) Report and compile final results as the upregulated vs. downregulated transcripts in the given dataset.

Script `frenemies-deseq_FEB.R`

```{r}
# Deseq values
library(tidyverse)
library(DESeq2)
library(tximport)

# DESeq
load(file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-feb-2025.RData", verbose = TRUE)
# txi_frenemies_mcr_gr, sample_merged_gr_mcr 
# save(txi_frenemies_mcr_gr, sample_merged_gr_mcr, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-feb-2025.RData")


# Import as DESeq object - use LIGHT in the design
cat("Data imported. Starting DESeq from Txi,\n")
ds_output_gr_mcr <- DESeqDataSetFromTximport(txi_frenemies_mcr_gr,
                                          colData = sample_merged_gr_mcr,
                                          design = ~0 + TYPE + SITE)
ds_output_gr_mcr

groupsize <- 2 # Transcript to consider, must be in at least 3 samples
keep <- rowSums(counts(ds_output_gr_mcr) >= 10) >= groupsize # And have >= to 10 counts

ds_output_gr_mcr_filtered_0 <- ds_output_gr_mcr[keep,]
ds_output_gr_mcr_filtered <- estimateSizeFactors(ds_output_gr_mcr_filtered_0, type = 'poscounts')


# Filtering stats:
cat("\nStarted with ", dim(ds_output_gr_mcr)[1], "observations. Filtering by 2 samples and 10 counts resulted in,", dim(ds_output_gr_mcr_filtered)[1], ", which is", (100*(dim(ds_output_gr_mcr_filtered)[1]/dim(ds_output_gr_mcr)[1])), "% of the data.\n\n")


## Re-level for comparison - set Vent as the reference.
ds_output_gr_mcr_filtered$TYPE <- relevel(ds_output_gr_mcr_filtered$TYPE, ref = "Vent")

# ds_tpm_output_filtered$TYPE_BIN <- factor(ds_tpm_output_filtered$TYPE, levels = c("Non-vent", "Vent"))
de_output_frenemies <- DESeq2::DESeq(ds_output_gr_mcr_filtered)

cat("Report summary stats from DE analysis.\n")

cat("Coefficient as it appears in the output:\n")
resultsNames(de_output_frenemies)

summary(de_output_frenemies)
# Rowname: indicating gene id
# Column 1: baseMean, average expression level across all samples normalised by sequencing depth
# Column 2: log2FoldChange, in this table above, of treated vs untreated
# Column 6: padj, adjusted p-value, p-value corrected for multiple testing

save(de_output_frenemies, ds_output_gr_mcr_filtered, ds_output_gr_mcr, sample_merged_gr_mcr, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/DESeq-frenemies-output_FEB.RData")
## REVIEW:
# https://introtogenomics.readthedocs.io/en/latest/2021.11.11.DeseqTutorial.html

save(de_output_frenemies, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/DEoutput_only_frenemies_FEB.RData")
```

Started with 37577784 observations. Filtering by 2 samples and 10 counts resulted in, 6435482 , which is 17.12576 % of the data for differential expression analysis.

# Stats from metatranscriptome data

```{r}
load("input-docs/dfs_gr_mcr_feb2025.RData", verbose = TRUE)
```

```{r}
head(mean_gr_mcr_TPM_df)
```

Across Gorda Ridge and Mid-Cayman Rise sites, we have 44 total samples included.

```{r}
glimpse(gr_mcr_lenscaled_TPM_df)
```

8,878,434 transcripts across Gorda Ridge and Mid-Cayman Rise samples. (8.9 million transcripts)

```{r}
# how many transcripts?
x <- dim(gr_mcr_lenscaled_TPM_df)[1];x
# head(gr_mcr_lenscaled_TPM_df)
```

```{r, fig.height=8, fig.width=9}
data.frame(colSums(gr_mcr_lenscaled_TPM_df)) %>% 
  rownames_to_column(var = "SAMPLE") %>% 
  select(SAMPLE, Transcript_total = `colSums.gr_mcr_lenscaled_TPM_df.`) %>% 
  ggplot(aes(x = SAMPLE, y = Transcript_total)) +
  geom_bar(stat = "identity", color = "black", fill = "#009999") +
  theme_classic() +
  labs(x = "", y = "Total number of transcripts") +
  coord_flip()
```

Histogram of transcript TPM

```{r}
rowsum_output <- (rowSums(gr_mcr_lenscaled_TPM_df))
range(rowsum_output)
mean(rowsum_output)

filtered <- rowsum_output[rowsum_output > ]
```

# Session Information

```{r}
sessionInfo()
```
