---
title: "Frenemies-metaT-analysis"
format: html
editor: visual
---

*last updated Sept 2024*

# Introduction

Code for running metatranscriptome analysis with [eukrhythmic](https://eukrhythmic.readthedocs.io/en/latest/index.html). Data originates from several vent sites for project 'Microbes need frenmies'.


## Set up environment

```{r}
#| message: false
library(tidyverse)
```

## Create eukrhythmic sample list

Import .csv files for all samples names.

```{r}
#| echo: false
sample_list <- read.csv("input-docs/frenemies-sample-list.csv")
fastq_list <- read.csv("input-docs/frenemies-fastq-list.csv", header = FALSE)
```

Fastq files were run on both lanes 1 and 2. So will treat as _technical_ replicates for now. Separate fastq_list file so we can left join the sample_list information.

For assembly groupings, we want diversity represented, but too much diversity may cause chimeric contigs. And if we put in too many reads, this can be a bottleneck for assembly (computationally).

Here, we decided to separate by vent field, sample type (vent vs. non-vent), and if there were many vents (like in the MCR sites), each vent was split into it's own assembly. Based on the 18S analysis, we know that vents even meters apart from one another can have very distinct and diverse communities. For the MCR work, some of the vent (in situ) samples were paired with shipboard grazing assays. These are assembled with the vent samples (as the original fluid was the same) and represent time final for the grazing experiments.

```{r}
# head(fastq_list)
# Create sample list for eukrhythmic input
sample_list_wassemblygroup <- fastq_list %>% 
  mutate(FastqFile = str_remove_all(V1, "_R1_001.fastq.gz"),
         SampleName = str_remove_all(FastqFile, "_S\\d+_L00\\d+")) %>% 
  left_join(sample_list %>% select(SampleName = SITE_NUM_FIELDYR_VENT_EXP_SAMPLEID, SAMPLEID, everything())) %>% 
  mutate(VENT = case_when(
    VENT == "Mustard Stand" ~ "MustardStand",
    TRUE ~ VENT
  )) %>% 
  mutate(TYPE = case_when( #Option to use casewhen for setting assembly grouping
  grepl("Plume", VENT) ~ "nonvent",
  grepl("plume", VENT) ~ "nonvent",
  grepl("Plus30m", VENT) ~ "nonvent",
  grepl("BSW", VENT) ~ "nonvent",
  grepl("Background", VENT) ~ "nonvent",
  grepl("Transit", VENT) ~ "nonvent",
  TRUE ~ "vent"
    )) %>%
  mutate(FIELD = case_when(
    FIELDYR == "VonDamm2020" ~ "VONDAMM",
    FIELDYR == "Piccard2020" ~ "PICCARD",
    TRUE ~ SITE
  )) %>% 
  mutate(AXIAL_CORR = case_when(
    grepl("IntlDistrict", VENT) ~ "IntlDistrict",
    grepl("ASHES", VENT) ~ "ASHES",
    grepl("Transit", VENT) ~ "Background",
    TRUE ~ VENT
  )) %>% 
  mutate(AssemblyGroup = case_when(
    SITE == "MCR" ~ paste(FIELD, VENT, TYPE, sep = "_"),
    SITE == "GR" ~ paste(FIELD, FIELDYR, TYPE, sep = "_"),
    SITE == "AXIAL" ~ paste(FIELD, AXIAL_CORR, TYPE, sep = "_")
  )) %>% 
  # unite("AssemblyGroup", c(FIELD, EXP, TYPE), remove = FALSE) %>% 
  mutate(SampleID = SampleName) %>% 
  select(SampleName, SampleID, AssemblyGroup, FastqFile, NUMBER = LAB_NUM, FIELD, SITE, FIELDYR, VENT, EXP, TYPE, SAMPLE_NAME, ORIGIN, SAMPLEID)
#SITE_NUM_FIELDYR_VENT_EXP_SAMPLEID
table(sample_list_wassemblygroup$AssemblyGroup)
# View(sample_list_wassemblygroup)
```

```{r}
# write_delim(sample_list_wassemblygroup %>% select(SampleName, SampleID, AssemblyGroup, FastqFile), file = "eukrhythmic-run/frenemies-metat-samplelist.txt", delim = "\t")
```

# Output from eukrhythmic

-   Salmon count files, `quant.sf`.
-   TaxonomicAndFunctionalAnnotations.csv

> Specific steps taken to create the above?

## Process with tximport

First run `scripts/create-samplelist.R`. This will output a sample list ready to be run with the tximport step.

Then execute `scripts/run_tximport_frenemies.R`. This will import all salmon count files and process transcript length to get transcript-level estimates as counts. With slurm: `sbatch metaT-run-tximport.sm`.

Output from above is an RData object that includes the txi object. This txi object can be subset for downstream analysis. It also includes a sample list for the txi object so we can subset specific samples.

```
/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-sept-2024.RData
```

# Mid-Cayman Rise samples only

The ```run_tximport_frenemies.R` script has code for executing all samples and then repeating the process for only samples from the Mid-Cayman Rise. 

For all below analyses, use this, `tximport-MCR-sept-2024.RData`.

## Get dataframes for MCR analysis

Import all needed R Objects:

```{r}
library(DESeq2)
library(tidyverse)
library(tximport)
library(data.table)

load("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-MCR-sept-2024.RData", verbose = TRUE)
# txi_mcr and sample_merged_mcr
```

The goal is to get a table with samples that reflects the *lengthScaledTPM*. This is calculated using _tximport_, where the the within-gene summed TPM is multiplied by the average transcript length, averaged over samples, then scaled up to the per-sample library size. 

The output can be treated as a *TPM* that has been corrected for differences in average transcript length across samples.

On grace:

How do I extract the correct TPM values?
```{r}
# mcr_length_scaled_TPM <- as.data.frame(txi_mcr$countsFromAbundance)
mcr_lenscaled_TPM <- makeCountsFromAbundance(
  as.matrix(txi_mcr$counts),
  as.matrix(txi_mcr$abundance),
  as.matrix(txi_mcr$length),
  countsFromAbundance = "lengthScaledTPM"
)

mcr_lenscaled_TPM_df <- as.data.frame(mcr_lenscaled_TPM)
colnames(mcr_lenscaled_TPM_df)
```

## Get raw stats on scaled TPMs

```{r}
# colnames(counts_df)
```


## Estimate across replicates

Rename so replicates have the same name for counts

```{r}
counts_df <- mcr_lenscaled_TPM_df
names_orig <- colnames(counts_df)
names_new <- sub("_[^_]+$", "", names_orig)
colnames(counts_df) <- names_new
```

Mean across columns that have the same name - which are replicates.

```{r}
counts_df <- mcr_lenscaled_TPM_df
names_orig <- colnames(counts_df)
names_new <- sub("_[^_]+$", "", names_orig)
colnames(counts_df) <- names_new
mean_counts_df <- counts_df %>%
  cbind(as.list(.) %>%
          Filter(is.numeric, .) %>%
          split(names(.)) %>%
          lapply(as.data.frame) %>%
          lapply(rowMeans) %>%
          setNames(paste0("mean.", names(.)))) %>%
  select(starts_with("mean"))
```

Export for downstream analysis

```{r}
# glimpse(mean_counts_df)
```

```{r}
# save(mean_counts_df, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/all_samples_vent_metaT.RData")
```


# Isolate dataframes for MCR DESeq analysis

Import libraries and RData object

```{r}
library(DESeq2)
library(tidyverse)
library(tximport)
library(data.table)

load("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-MCR-sept-2024.RData", verbose = TRUE)
# txi_mcr and sample_merged_mcr
```

*Process*: Subset the txi object and gene IDs at the level you want to do the DESeq analysis. Use the _subsetTxi_ function to subset the data to a new txi file. Use this in the _DESeq_ package to get differential expression information.


For the Mid-Cayman Rise analysis, I want to compare:

1) Vent only samples from Piccard vs. Von Damm
2) Vent only vs. non-vent samples
3) _in situ_ vent only vs. shipboard grazing


## Subset txi and gene IDs

This code is derived from `subset-txi.R`. 

Sample names are subset from the `sample_merged_mcr` file
```{r}
all_mcr <- sample_merged_mcr %>%
  select(sample = SAMPLE_REP)

vent_only_mcr <- sample_merged_mcr %>%
  filter(EXP == "insitu") %>% 
  filter(TYPE_BIN == "Vent") %>% 
  select(sample = SAMPLE_REP)

mcr_no_tf <- sample_merged_mcr %>% 
  filter(EXP == "insitu") %>% 
  select(sample = SAMPLE_REP)

# Of all the samples at MCR, which have paired in situ vs. Tf?
tmp_tf <- sample_merged_mcr %>% 
  filter(SITE == "MCR") %>% 
  # filter(VENT != "Background") %>% 
  # filter(VENT != "Plume") %>% 
  select(EXP, VENT) %>% 
  add_column(VAR = 1) %>% 
  pivot_wider(names_from = EXP, values_from = VAR, values_fn = sum) %>% 
  drop_na()

vent_wexperiments <- as.character(tmp_tf$VENT)

mcr_paired_tf <- sample_merged_mcr %>% 
  filter(VENT %in% vent_wexperiments) %>% 
  select(sample = SAMPLE_REP)

# mcr_paired_tf, mcr_no_tf, all_mcr, vent_only_mcr
```

Get geneIDs

```{r}
taxfxn <- read.table("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/TaxonomicAndFunctionalAnnotations.csv", header = TRUE, sep = "\t")

tx2gene_in <- taxfxn %>% 
  dplyr::mutate(SEQ_ID = stringr::str_remove(SequenceID, ".p[:digit:]$"))

all_transcripts <- as.character(tx2gene_in %>%
                            select(transcript_name) %>% 
                            .[["transcript_name"]])
```

Save R objects:
```{r}
save(mcr_paired_tf, mcr_no_tf, all_mcr, vent_only_mcr, all_transcripts, file = "/scratch/group/hu-lab/frenemies/mcr-txi-subset-objects.RData")
```

#### Function to subset txi

```{r}
# Subset txi directly
subsetTxi <- function(txi, samples, include_genes=rownames(txi$counts))
{
  genes <- rownames(txi$counts)[rownames(txi$counts) %in% include_genes]
  txi$abundance <- txi$abundance[genes, samples$sample]
  txi$counts <- txi$counts[genes, samples$sample]
  txi$length <- txi$length[genes, samples$sample]
  return(txi)
}
```

### (1) Piccard vs. Von Damm

Vent only samples from Piccard vs. Von Damm: use `vent_only_mcr` and FIELDYR
```{r}
txi_mcr_byfield <- subsetTxi(txi_mcr, vent_only_mcr, all_transcripts)
# FIELDYR
```

DESeq import step
```{r}
# Import as DESeq object - use categories in the design
# DESeq
ds_tpm_field <- DESeqDataSetFromTximport(txi_mcr_byfield,
                                            colData = vent_only_mcr,
                                            design = ~0 + FIELDYR)
## (Option)
# Further process DESeq
# groupsize <- 2 # Transcript to consider, must be in at least 3 samples
# keep <- rowSums(counts(ds_tpm_output) >= 10) >= groupsize # And have >= to 10 counts  #
# ds_tpm_output_filtered_0 <- ds_tpm_output[keep,]
# ds_tpm_output_filtered <- estimateSizeFactors(ds_tpm_output_filtered_0, type = 'poscounts')
# ###
# Filtering stats:
# cat("\nStarted with ", dim(ds_tpm_output)[1], "observations. Filtering by 2 samples and 10 counts resulted in,", dim(ds_tpm_output_filtered)[1], ", which is", (100*(dim(ds_tpm_output_filtered)[1]/dim(ds_tpm_output)[1])), "% of the data.\n\n")
```

```{r}
## Positive log fold change == up regulated in ONE, compared to TWO
# ds_tpm_output_filtered$TYPE <- factor(ds_tpm_output_filtered$TYPE, levels = c("TWO", "ONE"))
cat("\n\nUpreg in Von Damm is positive\n\n")
ds_tpm_field$FIELDYR <- factor(ds_tpm_field$FIELDYR, levels = c("Piccard2020", "VonDamm2020"))

ds_output_field <- DESeq2::DESeq(ds_tpm_field)
resultsNames(ds_output_field)
summary(ds_output_field)
```

```{r}
save(txi_mcr_byfield, vent_only_mcr, ds_tpm_field, ds_output_field, file = "/scratch/group/hu-lab/frenemies/MCR_byfield_DESeq.RData")
```

### (2) Vent only vs. non-vent

Vent only vs. non-vent samples: use `mcr_no_tf` and TYPE_BIN
```{r}
txi_mcr_vent_nonvent <- subsetTxi(txi_mcr, mcr_no_tf, all_transcripts)
```

DESeq import step
```{r}
# Import as DESeq object - use categories in the design
# DESeq
ds_tpm_bin_type <- DESeqDataSetFromTximport(txi_mcr_vent_nonvent,
                                            colData = mcr_no_tf,
                                            design = ~0 + TYPE_BIN)
## (Option)
# Further process DESeq
# groupsize <- 2 # Transcript to consider, must be in at least 3 samples
# keep <- rowSums(counts(ds_tpm_output) >= 10) >= groupsize # And have >= to 10 counts  #
# ds_tpm_output_filtered_0 <- ds_tpm_output[keep,]
# ds_tpm_output_filtered <- estimateSizeFactors(ds_tpm_output_filtered_0, type = 'poscounts')
# ###
# Filtering stats:
# cat("\nStarted with ", dim(ds_tpm_output)[1], "observations. Filtering by 2 samples and 10 counts resulted in,", dim(ds_tpm_output_filtered)[1], ", which is", (100*(dim(ds_tpm_output_filtered)[1]/dim(ds_tpm_output)[1])), "% of the data.\n\n")
```


```{r}
## Positive log fold change == up regulated in ONE, compared to TWO
# ds_tpm_output_filtered$TYPE <- factor(ds_tpm_output_filtered$TYPE, levels = c("TWO", "ONE"))
cat("\n\nUpreg in vent is positive\n\n")
ds_tpm_bin_type$TYPE_BIN <- factor(ds_tpm_bin_type$TYPE_BIN, levels = c("Non-vent", "Vent"))

de_output_bin_type <- DESeq2::DESeq(ds_tpm_bin_type)
resultsNames(de_output_bin_type)
summary(de_output_bin_type)
```


```{r}
save(txi_mcr_byfield, mcr_no_tf, ds_tpm_bin_type, de_output_bin_type, file = "/scratch/group/hu-lab/frenemies/MCR_bytype_DESeq.RData")
```

### (3) Grazing vs. in situ
_in situ_ vent only vs. shipboard grazing: use `mcr_paired_tf` and EXP

```{r}
txi_mcr_tf_insitu <- subsetTxi(txi_mcr, mcr_paired_tf, all_transcripts)
```

DESeq import step
```{r}
# Import as DESeq object - use categories in the design
# DESeq
ds_tpm_exp <- DESeqDataSetFromTximport(txi_mcr_tf_insitu,
                                            colData = mcr_paired_tf,
                                            design = ~0 + EXP)
## (Option)
# Further process DESeq
# groupsize <- 2 # Transcript to consider, must be in at least 3 samples
# keep <- rowSums(counts(ds_tpm_output) >= 10) >= groupsize # And have >= to 10 counts  #
# ds_tpm_output_filtered_0 <- ds_tpm_output[keep,]
# ds_tpm_output_filtered <- estimateSizeFactors(ds_tpm_output_filtered_0, type = 'poscounts')
# ###
# Filtering stats:
# cat("\nStarted with ", dim(ds_tpm_output)[1], "observations. Filtering by 2 samples and 10 counts resulted in,", dim(ds_tpm_output_filtered)[1], ", which is", (100*(dim(ds_tpm_output_filtered)[1]/dim(ds_tpm_output)[1])), "% of the data.\n\n")
```


```{r}
## Positive log fold change == up regulated in ONE, compared to TWO
# ds_tpm_output_filtered$TYPE <- factor(ds_tpm_output_filtered$TYPE, levels = c("TWO", "ONE"))
cat("\n\nUpreg in vent is positive\n\n")
ds_tpm_exp$EXP <- factor(ds_tpm_exp$EXP, levels = c("Tf", "insitu"))

ds_output_exp <- DESeq2::DESeq(ds_tpm_exp)
resultsNames(ds_output_exp)
summary(ds_output_exp)
```


```{r}
save(txi_mcr_tf_insitu, mcr_paired_tf, ds_tpm_exp, ds_output_exp, file = "/scratch/group/hu-lab/frenemies/MCR_byexp_DESeq.RData")
```


### Compiled DEseq outputs together

```{r}
df_deseq_compiled <- (data.frame(ds_output_field) %>% 
  add_column(DESEQ = "Von Damm vs. Piccard") %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in Von Damm",
    log2FoldChange < 0 ~ "upregulated in Piccard"
  ))) %>% 
  bind_rows(data.frame(de_output_bin_type) %>% 
  add_column(DESEQ = "Vent vs. non-vent") %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in vent",
    log2FoldChange < 0 ~ "upregulated in non-vent"
  ))) %>% 
  bind_rows(data.frame(ds_output_exp) %>% 
  add_column(DESEQ = "Grazing vs. in situ") %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in situ",
    log2FoldChange < 0 ~ "upregulated in grazing Tf"
  ))) %>% 
  rownames_to_column(var = "SequenceID") %>% 
  SIGNIFICANT = case_when(
    pvalue <= 0.05 ~ "Significantly",
    TRUE ~ "Not significantly"
  )
```

Get stats
```{r}
stats_deseq <- df_deseq_compiled %>% 
  group_by(DESEQ, REGULATION, SIGNIFICANT) %>% 
  summarise(Total_num = n())

write_delim(stats_deseq, file = "output/stats_deseq.txt", delim = "\t")
  
  
#   ggplot(aes(x = baseMean, y = log2FoldChange, color = SIGNIFICANT)) +
#   geom_point(stat = "identity") +
#   scale_x_log10() +
#   theme_classic() +
#   scale_color_manual(values = c("#878787", "#d73027")) +
#   labs(title = mcols(results_all_fields)$description[2])
# 
# allfields_vent_v_nonvent_transcripts <- data.frame(results_all_fields) %>% 
#   mutate(REGULATION = case_when(
#     log2FoldChange > 0 ~ "upregulated in vent",
#     log2FoldChange < 0 ~ "upregulated in non-vent"
#   ),
#   SIGNIFICANT = case_when(
#     pvalue <= 0.05 ~ "Significantly",
#     TRUE ~ "Not significantly"
#   )) %>% 
#   # filter(SIGNIFICANT == "Significantly") %>% 
#   rownames_to_column(var = "SequenceID")
```

