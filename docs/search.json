[
  {
    "objectID": "metat-analysis-eukrhythmic.html",
    "href": "metat-analysis-eukrhythmic.html",
    "title": "eukrhythmic output",
    "section": "",
    "text": "last updated ARCHIVE"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#set-up-environment",
    "href": "metat-analysis-eukrhythmic.html#set-up-environment",
    "title": "eukrhythmic output",
    "section": "1.1 Set up environment",
    "text": "1.1 Set up environment\n\n# | warning: false\n# | message: false\nlibrary(tidyverse)\nlibrary(DESeq2)\nlibrary(tximport)\nlibrary(data.table)"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#create-eukrhythmic-sample-list",
    "href": "metat-analysis-eukrhythmic.html#create-eukrhythmic-sample-list",
    "title": "eukrhythmic output",
    "section": "1.2 Create eukrhythmic sample list",
    "text": "1.2 Create eukrhythmic sample list\nImport .csv files for all samples names.\nFastq files were run on both lanes 1 and 2. So will treat as technical replicates for now. Separate fastq_list file so we can left join the sample_list information.\nFor assembly groupings, we want diversity represented, but too much diversity may cause chimeric contigs. And if we put in too many reads, this can be a bottleneck for assembly (computationally).\nHere, we decided to separate by vent field, sample type (vent vs. non-vent), and if there were many vents (like in the MCR sites), each vent was split into it’s own assembly. Based on the 18S analysis, we know that vents even meters apart from one another can have very distinct and diverse communities. For the MCR work, some of the vent (in situ) samples were paired with shipboard grazing assays. These are assembled with the vent samples (as the original fluid was the same) and represent time final for the grazing experiments.\n\n# head(fastq_list)\n# Create sample list for eukrhythmic input\nsample_list_wassemblygroup &lt;- fastq_list %&gt;% \n  mutate(FastqFile = str_remove_all(V1, \"_R1_001.fastq.gz\"),\n         SampleName = str_remove_all(FastqFile, \"_S\\\\d+_L00\\\\d+\")) %&gt;% \n  left_join(sample_list %&gt;% select(SampleName = SITE_NUM_FIELDYR_VENT_EXP_SAMPLEID, SAMPLEID, everything())) %&gt;% \n  mutate(VENT = case_when(\n    VENT == \"Mustard Stand\" ~ \"MustardStand\",\n    TRUE ~ VENT\n  )) %&gt;% \n  mutate(TYPE = case_when( #Option to use casewhen for setting assembly grouping\n  grepl(\"Plume\", VENT) ~ \"nonvent\",\n  grepl(\"plume\", VENT) ~ \"nonvent\",\n  grepl(\"Plus30m\", VENT) ~ \"nonvent\",\n  grepl(\"BSW\", VENT) ~ \"nonvent\",\n  grepl(\"Background\", VENT) ~ \"nonvent\",\n  grepl(\"Transit\", VENT) ~ \"nonvent\",\n  TRUE ~ \"vent\"\n    )) %&gt;%\n  mutate(FIELD = case_when(\n    FIELDYR == \"VonDamm2020\" ~ \"VONDAMM\",\n    FIELDYR == \"Piccard2020\" ~ \"PICCARD\",\n    TRUE ~ SITE\n  )) %&gt;% \n  mutate(AXIAL_CORR = case_when(\n    grepl(\"IntlDistrict\", VENT) ~ \"IntlDistrict\",\n    grepl(\"ASHES\", VENT) ~ \"ASHES\",\n    grepl(\"Transit\", VENT) ~ \"Background\",\n    TRUE ~ VENT\n  )) %&gt;% \n  mutate(AssemblyGroup = case_when(\n    SITE == \"MCR\" ~ paste(FIELD, VENT, TYPE, sep = \"_\"),\n    SITE == \"GR\" ~ paste(FIELD, FIELDYR, TYPE, sep = \"_\"),\n    SITE == \"AXIAL\" ~ paste(FIELD, AXIAL_CORR, TYPE, sep = \"_\")\n  )) %&gt;% \n  # unite(\"AssemblyGroup\", c(FIELD, EXP, TYPE), remove = FALSE) %&gt;% \n  mutate(SampleID = SampleName) %&gt;% \n  select(SampleName, SampleID, AssemblyGroup, FastqFile, NUMBER = LAB_NUM, FIELD, SITE, FIELDYR, VENT, EXP, TYPE, SAMPLE_NAME, ORIGIN, SAMPLEID)\n#SITE_NUM_FIELDYR_VENT_EXP_SAMPLEID\ntable(sample_list_wassemblygroup$AssemblyGroup)\n# View(sample_list_wassemblygroup)\n\n\n# write_delim(sample_list_wassemblygroup %&gt;% select(SampleName, SampleID, AssemblyGroup, FastqFile), file = \"eukrhythmic-run/frenemies-metat-samplelist.txt\", delim = \"\\t\")"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#process-with-tximport",
    "href": "metat-analysis-eukrhythmic.html#process-with-tximport",
    "title": "Frenemies-metaT-analysis",
    "section": "2.1 Process with tximport",
    "text": "2.1 Process with tximport\nFirst run scripts/create-samplelist.R. This will output a sample list ready to be run with the tximport step.\nThen execute scripts/run_tximport_frenemies.R. This will import all salmon count files and process transcript length to get transcript-level estimates as counts. With slurm: sbatch metaT-run-tximport.sm.\nOutput from above is an RData object that includes the txi object. This txi object can be subset for downstream analysis. It also includes a sample list for the txi object so we can subset specific samples.\n/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-sept-2024.RData"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#get-dataframes-for-mcr-analysis",
    "href": "metat-analysis-eukrhythmic.html#get-dataframes-for-mcr-analysis",
    "title": "Frenemies-metaT-analysis",
    "section": "3.1 Get dataframes for MCR analysis",
    "text": "3.1 Get dataframes for MCR analysis\nImport all needed R Objects:\n\nlibrary(DESeq2)\nlibrary(tidyverse)\nlibrary(tximport)\nlibrary(data.table)\n\nload(\"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-MCR-sept-2024.RData\", verbose = TRUE)\n# txi_mcr and sample_merged_mcr\n\nThe goal is to get a table with samples that reflects the lengthScaledTPM. This is calculated using tximport, where the the within-gene summed TPM is multiplied by the average transcript length, averaged over samples, then scaled up to the per-sample library size.\nThe output can be treated as a TPM that has been corrected for differences in average transcript length across samples.\nOn grace:\nHow do I extract the correct TPM values?\n\nclass(txi_mcr)\n\n(as.data.frame(txi_mcr$countsFromAbundance))\n\nmcr_lenscaled_TPM &lt;- makeCountsFromAbundance(\n  as.matrix(txi_mcr$counts),\n  as.matrix(txi_mcr$abundance),\n  as.matrix(txi_mcr$length),\n  countsFromAbundance = \"lengthScaledTPM\"\n)\n\n\n# Go from matrix to data frame. Remove rows that only have zeroes\nmcr_lenscaled_TPM_df &lt;- as.data.frame(mcr_lenscaled_TPM) %&gt;% \n  filter(if_any(everything(.), ~. != 0))\n\nglimpse(mcr_lenscaled_TPM_df)\n# from 37.5 million to 13,809,499 transcripts. This is representative of things detected at MCR."
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#estimate-across-replicates",
    "href": "metat-analysis-eukrhythmic.html#estimate-across-replicates",
    "title": "Frenemies-metaT-analysis",
    "section": "3.2 Estimate across replicates",
    "text": "3.2 Estimate across replicates\nRename so replicates have the same name for counts\n\n## Get mean across replicates\ncounts_df &lt;- mcr_lenscaled_TPM_df\nnames_orig &lt;- colnames(counts_df)\nnames_new &lt;- sub(\"_[^_]+$\", \"\", names_orig)\ncolnames(counts_df) &lt;- names_new\n\nmean_mcr_TPM_df &lt;- counts_df %&gt;% \n  cbind(as.list(.) %&gt;%\n          Filter(is.numeric, .) %&gt;%\n          split(names(.)) %&gt;%\n          lapply(as.data.frame) %&gt;%\n          lapply(rowMeans) %&gt;%\n          setNames(paste0(\"mean.\", names(.)))) %&gt;%\n  select(starts_with(\"mean\"))\n\nSave data frames for downstream analysis\n\n# mcr_lenscaled_TPM - matrix of everything\n# mcr_lenscaled_TPM_df - data frame, all zero trancripts removed\n# mean_mcr_TPM_df - average TPM across replicates\nsave(mcr_lenscaled_TPM, mcr_lenscaled_TPM_df, mean_mcr_TPM_df, file = \"/scratch/group/hu-lab/frenemies/dfs_mcr_sept2024.RData\")"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#get-raw-stats-on-scaled-tpms",
    "href": "metat-analysis-eukrhythmic.html#get-raw-stats-on-scaled-tpms",
    "title": "Frenemies-metaT-analysis",
    "section": "3.3 Get raw stats on scaled TPMs",
    "text": "3.3 Get raw stats on scaled TPMs\n\n# Get stats\n# how many transcripts?\nx &lt;- dim(mcr_lenscaled_TPM_df)[1]\ntmp &lt;- unique(row.names(mcr_lenscaled_TPM_df))\nlength(tmp)\n\n# Only two transcripts were found in ALL MCR samples\ntmp_nozero &lt;- mcr_lenscaled_TPM_df %&gt;% \n  filter(if_any(everything(.), ~. != 0))\n\ny &lt;- dim(tmp_nozero)[1]\ny\ny/x\n# 36% of all transripts represented in MCR data only"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#subset-txi-and-gene-ids",
    "href": "metat-analysis-eukrhythmic.html#subset-txi-and-gene-ids",
    "title": "Frenemies-metaT-analysis",
    "section": "5.1 Subset txi and gene IDs",
    "text": "5.1 Subset txi and gene IDs\nThis code is derived from subset-txi.R.\nSample names are subset from the sample_merged_mcr file\n\nall_mcr &lt;- sample_merged_mcr %&gt;%\n  select(sample = SAMPLE_REP)\n\nvent_only_mcr &lt;- sample_merged_mcr %&gt;%\n  filter(EXP == \"insitu\") %&gt;% \n  filter(TYPE_BIN == \"Vent\") %&gt;% \n  select(sample = SAMPLE_REP)\n\nmcr_no_tf &lt;- sample_merged_mcr %&gt;% \n  filter(EXP == \"insitu\") %&gt;% \n  select(sample = SAMPLE_REP)\n\n# Of all the samples at MCR, which have paired in situ vs. Tf?\ntmp_tf &lt;- sample_merged_mcr %&gt;% \n  filter(SITE == \"MCR\") %&gt;% \n  # filter(VENT != \"Background\") %&gt;% \n  # filter(VENT != \"Plume\") %&gt;% \n  select(EXP, VENT) %&gt;% \n  add_column(VAR = 1) %&gt;% \n  pivot_wider(names_from = EXP, values_from = VAR, values_fn = sum) %&gt;% \n  drop_na()\n\nvent_wexperiments &lt;- as.character(tmp_tf$VENT)\n\nmcr_paired_tf &lt;- sample_merged_mcr %&gt;% \n  filter(VENT %in% vent_wexperiments) %&gt;% \n  select(sample = SAMPLE_REP)\n\n# mcr_paired_tf, mcr_no_tf, all_mcr, vent_only_mcr\n\nGet geneIDs\n\ntaxfxn &lt;- read.table(\"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/TaxonomicAndFunctionalAnnotations.csv\", header = TRUE, sep = \"\\t\")\n\ntx2gene_in &lt;- taxfxn %&gt;% \n  dplyr::mutate(SEQ_ID = stringr::str_remove(SequenceID, \".p[:digit:]$\"))\n\nall_transcripts &lt;- as.character(tx2gene_in %&gt;%\n                            select(transcript_name) %&gt;% \n                            .[[\"transcript_name\"]])\n\nSave R objects:\n\nsave(mcr_paired_tf, mcr_no_tf, all_mcr, vent_only_mcr, all_transcripts, file = \"/scratch/group/hu-lab/frenemies/mcr-txi-subset-objects.RData\")\n\n\nFunction to subset txi\n\n# Subset txi directly\nsubsetTxi &lt;- function(txi, samples, include_genes=rownames(txi$counts))\n{\n  genes &lt;- rownames(txi$counts)[rownames(txi$counts) %in% include_genes]\n  txi$abundance &lt;- txi$abundance[genes, samples$sample]\n  txi$counts &lt;- txi$counts[genes, samples$sample]\n  txi$length &lt;- txi$length[genes, samples$sample]\n  return(txi)\n}\n\n\n\n5.1.1 (1) Piccard vs. Von Damm\nVent only samples from Piccard vs. Von Damm: use vent_only_mcr and FIELDYR\n\ntxi_mcr_byfield &lt;- subsetTxi(txi_mcr, vent_only_mcr, all_transcripts)\n# FIELDYR\n\nDESeq import step\n\n# Import as DESeq object - use categories in the design\n# DESeq\nds_tpm_field &lt;- DESeqDataSetFromTximport(txi_mcr_byfield,\n                                            colData = vent_only_mcr,\n                                            design = ~0 + FIELDYR)\n## (Option)\n# Further process DESeq\n# groupsize &lt;- 2 # Transcript to consider, must be in at least 3 samples\n# keep &lt;- rowSums(counts(ds_tpm_output) &gt;= 10) &gt;= groupsize # And have &gt;= to 10 counts  #\n# ds_tpm_output_filtered_0 &lt;- ds_tpm_output[keep,]\n# ds_tpm_output_filtered &lt;- estimateSizeFactors(ds_tpm_output_filtered_0, type = 'poscounts')\n# ###\n# Filtering stats:\n# cat(\"\\nStarted with \", dim(ds_tpm_output)[1], \"observations. Filtering by 2 samples and 10 counts resulted in,\", dim(ds_tpm_output_filtered)[1], \", which is\", (100*(dim(ds_tpm_output_filtered)[1]/dim(ds_tpm_output)[1])), \"% of the data.\\n\\n\")\n\n\n## Positive log fold change == up regulated in ONE, compared to TWO\n# ds_tpm_output_filtered$TYPE &lt;- factor(ds_tpm_output_filtered$TYPE, levels = c(\"TWO\", \"ONE\"))\ncat(\"\\n\\nUpreg in Von Damm is positive\\n\\n\")\nds_tpm_field$FIELDYR &lt;- factor(ds_tpm_field$FIELDYR, levels = c(\"Piccard2020\", \"VonDamm2020\"))\n\nds_output_field &lt;- DESeq2::DESeq(ds_tpm_field)\nresultsNames(ds_output_field)\nsummary(ds_output_field)\n\n\nsave(txi_mcr_byfield, vent_only_mcr, ds_tpm_field, ds_output_field, file = \"/scratch/group/hu-lab/frenemies/MCR_byfield_DESeq.RData\")\n\n\n\n5.1.2 (2) Vent only vs. non-vent\nVent only vs. non-vent samples: use mcr_no_tf and TYPE_BIN\n\ntxi_mcr_vent_nonvent &lt;- subsetTxi(txi_mcr, mcr_no_tf, all_transcripts)\n\nDESeq import step\n\n# Import as DESeq object - use categories in the design\n# DESeq\nds_tpm_bin_type &lt;- DESeqDataSetFromTximport(txi_mcr_vent_nonvent,\n                                            colData = mcr_no_tf,\n                                            design = ~0 + TYPE_BIN)\n## (Option)\n# Further process DESeq\n# groupsize &lt;- 2 # Transcript to consider, must be in at least 3 samples\n# keep &lt;- rowSums(counts(ds_tpm_output) &gt;= 10) &gt;= groupsize # And have &gt;= to 10 counts  #\n# ds_tpm_output_filtered_0 &lt;- ds_tpm_output[keep,]\n# ds_tpm_output_filtered &lt;- estimateSizeFactors(ds_tpm_output_filtered_0, type = 'poscounts')\n# ###\n# Filtering stats:\n# cat(\"\\nStarted with \", dim(ds_tpm_output)[1], \"observations. Filtering by 2 samples and 10 counts resulted in,\", dim(ds_tpm_output_filtered)[1], \", which is\", (100*(dim(ds_tpm_output_filtered)[1]/dim(ds_tpm_output)[1])), \"% of the data.\\n\\n\")\n\n\n## Positive log fold change == up regulated in ONE, compared to TWO\n# ds_tpm_output_filtered$TYPE &lt;- factor(ds_tpm_output_filtered$TYPE, levels = c(\"TWO\", \"ONE\"))\ncat(\"\\n\\nUpreg in vent is positive\\n\\n\")\nds_tpm_bin_type$TYPE_BIN &lt;- factor(ds_tpm_bin_type$TYPE_BIN, levels = c(\"Non-vent\", \"Vent\"))\n\nde_output_bin_type &lt;- DESeq2::DESeq(ds_tpm_bin_type)\nresultsNames(de_output_bin_type)\nsummary(de_output_bin_type)\n\n\nsave(txi_mcr_byfield, mcr_no_tf, ds_tpm_bin_type, de_output_bin_type, file = \"/scratch/group/hu-lab/frenemies/MCR_bytype_DESeq.RData\")\n\n\n\n5.1.3 (3) Grazing vs. in situ\nin situ vent only vs. shipboard grazing: use mcr_paired_tf and EXP\n\ntxi_mcr_tf_insitu &lt;- subsetTxi(txi_mcr, mcr_paired_tf, all_transcripts)\n\nDESeq import step\n\n# Import as DESeq object - use categories in the design\n# DESeq\nds_tpm_exp &lt;- DESeqDataSetFromTximport(txi_mcr_tf_insitu,\n                                            colData = mcr_paired_tf,\n                                            design = ~0 + EXP)\n## (Option)\n# Further process DESeq\n# groupsize &lt;- 2 # Transcript to consider, must be in at least 3 samples\n# keep &lt;- rowSums(counts(ds_tpm_output) &gt;= 10) &gt;= groupsize # And have &gt;= to 10 counts  #\n# ds_tpm_output_filtered_0 &lt;- ds_tpm_output[keep,]\n# ds_tpm_output_filtered &lt;- estimateSizeFactors(ds_tpm_output_filtered_0, type = 'poscounts')\n# ###\n# Filtering stats:\n# cat(\"\\nStarted with \", dim(ds_tpm_output)[1], \"observations. Filtering by 2 samples and 10 counts resulted in,\", dim(ds_tpm_output_filtered)[1], \", which is\", (100*(dim(ds_tpm_output_filtered)[1]/dim(ds_tpm_output)[1])), \"% of the data.\\n\\n\")\n\n\n## Positive log fold change == up regulated in ONE, compared to TWO\n# ds_tpm_output_filtered$TYPE &lt;- factor(ds_tpm_output_filtered$TYPE, levels = c(\"TWO\", \"ONE\"))\ncat(\"\\n\\nUpreg in vent is positive\\n\\n\")\nds_tpm_exp$EXP &lt;- factor(ds_tpm_exp$EXP, levels = c(\"Tf\", \"insitu\"))\n\nds_output_exp &lt;- DESeq2::DESeq(ds_tpm_exp)\nresultsNames(ds_output_exp)\nsummary(ds_output_exp)\n\n\nsave(txi_mcr_tf_insitu, mcr_paired_tf, ds_tpm_exp, ds_output_exp, file = \"/scratch/group/hu-lab/frenemies/MCR_byexp_DESeq.RData\")\n\n\n\n5.1.4 Compiled DEseq outputs together\n\ndf_deseq_compiled &lt;- (data.frame(ds_output_field) %&gt;% \n  add_column(DESEQ = \"Von Damm vs. Piccard\") %&gt;% \n  mutate(REGULATION = case_when(\n    log2FoldChange &gt; 0 ~ \"upregulated in Von Damm\",\n    log2FoldChange &lt; 0 ~ \"upregulated in Piccard\"\n  ))) %&gt;% \n  bind_rows(data.frame(de_output_bin_type) %&gt;% \n  add_column(DESEQ = \"Vent vs. non-vent\") %&gt;% \n  mutate(REGULATION = case_when(\n    log2FoldChange &gt; 0 ~ \"upregulated in vent\",\n    log2FoldChange &lt; 0 ~ \"upregulated in non-vent\"\n  ))) %&gt;% \n  bind_rows(data.frame(ds_output_exp) %&gt;% \n  add_column(DESEQ = \"Grazing vs. in situ\") %&gt;% \n  mutate(REGULATION = case_when(\n    log2FoldChange &gt; 0 ~ \"upregulated in situ\",\n    log2FoldChange &lt; 0 ~ \"upregulated in grazing Tf\"\n  ))) %&gt;% \n  rownames_to_column(var = \"SequenceID\") %&gt;% \n  SIGNIFICANT = case_when(\n    pvalue &lt;= 0.05 ~ \"Significantly\",\n    TRUE ~ \"Not significantly\"\n  )\n\nGet stats\n\nstats_deseq &lt;- df_deseq_compiled %&gt;% \n  group_by(DESEQ, REGULATION, SIGNIFICANT) %&gt;% \n  summarise(Total_num = n())\n\nwrite_delim(stats_deseq, file = \"output/stats_deseq.txt\", delim = \"\\t\")\n  \n  \n#   ggplot(aes(x = baseMean, y = log2FoldChange, color = SIGNIFICANT)) +\n#   geom_point(stat = \"identity\") +\n#   scale_x_log10() +\n#   theme_classic() +\n#   scale_color_manual(values = c(\"#878787\", \"#d73027\")) +\n#   labs(title = mcols(results_all_fields)$description[2])\n# \n# allfields_vent_v_nonvent_transcripts &lt;- data.frame(results_all_fields) %&gt;% \n#   mutate(REGULATION = case_when(\n#     log2FoldChange &gt; 0 ~ \"upregulated in vent\",\n#     log2FoldChange &lt; 0 ~ \"upregulated in non-vent\"\n#   ),\n#   SIGNIFICANT = case_when(\n#     pvalue &lt;= 0.05 ~ \"Significantly\",\n#     TRUE ~ \"Not significantly\"\n#   )) %&gt;% \n#   # filter(SIGNIFICANT == \"Significantly\") %&gt;% \n#   rownames_to_column(var = \"SequenceID\")"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#process-counts-with-tximport",
    "href": "metat-analysis-eukrhythmic.html#process-counts-with-tximport",
    "title": "eukrhythmic output",
    "section": "3.1 Process counts with tximport",
    "text": "3.1 Process counts with tximport\nFirst run scripts/create-samplelist.R. This will output a sample list ready to be run with the tximport step.\nThen execute scripts/run_tximport_frenemies.R. This will import all salmon count files and process transcript length to get transcript-level estimates as counts. With slurm script: sbatch metaT-run-tximport.sm.\nOutput from above includes 2 RData files. tximport-feb-2025.RData is a txi class objects for the MCR and GR data and dfs_gr_mcr_feb2025.RData has large dataframes with the TPM values from the txi objects.\nFile location:\n#save(txi_frenemies_mcr_gr, sample_merged_gr_mcr, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-feb-2025.RData\")\n#save(lenscaled_TPM, gr_mcr_lenscaled_TPM_df, mean_gr_mcr_TPM_df, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/dfs_gr_mcr_feb2025.RData\")\nThe goal is to get a table with samples that reflects the lengthScaledTPM. This is calculated using tximport, where the the within-gene summed TPM is multiplied by the average transcript length, averaged over samples, then scaled up to the per-sample library size.\nThe output can be treated as a TPM that has been corrected for differences in average transcript length across samples."
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#align-with-annotation-information",
    "href": "metat-analysis-eukrhythmic.html#align-with-annotation-information",
    "title": "eukrhythmic output",
    "section": "4.1 Align with annotation information",
    "text": "4.1 Align with annotation information\nUse script frenemies-compile-dfs_FEB.R\n\n# Compile large datasets for use in R. \nlibrary(data.table)\nlibrary(tximport)\nlibrary(readr)\nlibrary(tidyverse)\n\ncat(\"Importing files\\n\")\nload(\"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/dfs_gr_mcr_feb2025.RData\", verbose = TRUE)\n# lenscaled_TPM, gr_mcr_lenscaled_TPM_df, mean_gr_mcr_TPM_df\n\ntaxfxn &lt;- read.table(\"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/TaxonomicAndFunctionalAnnotations.csv\", header = TRUE, sep = \"\\t\")\n\ntx2gene_in &lt;- taxfxn %&gt;% \n  separate_longer_delim(KEGG_ko, delim = \",\") %&gt;% # Remove comma separated KEGG IDs\n  select(SequenceID, seed_ortholog, COG_category, GOs, KEGG = KEGG_ko, PFAMs, classification_level, full_classification, classification, max_pid) %&gt;% \n  dplyr::mutate(SEQ_ID = stringr::str_remove(SequenceID, \".p[:digit:]$\"))\n\ncat(\"Modified taxfxn:\\n\")\nhead(tx2gene_in)\n# head(rownames(mean_gr_mcr_TPM_df))\n\ncat(\"Files imported.\\n\")\n\ncat(\"View mean_gr_mcr_TPM_df\\n\\n\")\nhead(mean_gr_mcr_TPM_df)\n\ncat(\"Pivot to long format:\\n\")\n# Make longer data frame\nlong_frenemies &lt;- mean_gr_mcr_TPM_df %&gt;%\n  rowwise() %&gt;%\n  # Add column with number of samples with a 0.\n  mutate(NUM_ZERO = sum(c_across(starts_with(\"mean.\")) == 0)) %&gt;%\n  rownames_to_column(var = \"SEQ_ID\") %&gt;%\n  pivot_longer(cols = starts_with(\"mean\"), values_to = \"scaledTPM\") %&gt;%\n  # Remove zeroes\n  filter(scaledTPM &gt; 0) %&gt;%\n  separate(name, c(\"meanfield\", \"LIBRARY_NUM\", \"fieldyear\", \"LOCATION\", \"SAMPLETYPE\", \"SAMPLEID\"), \"_\",\n           remove = FALSE) %&gt;%\n  # Isolate the in situ samples only\n  filter(SAMPLETYPE == \"insitu\") %&gt;% \n  select(-meanfield, -name) %&gt;%\n  mutate(VENT_FIELD = case_when(grepl(\"Piccard\", fieldyear) ~ \"Piccard\",\n                                grepl(\"VonDamm\", fieldyear) ~ \"Von Damm\",\n                                grepl(\"Axial\", fieldyear) ~ \"Axial\",\n                                grepl(\"Gorda\", fieldyear) ~ \"Gorda Ridge\")) %&gt;%\n  mutate(VENT_BIN = case_when(\n    (LOCATION == \"Background\" | LOCATION == \"Plume\" | LOCATION == \"BSW\") ~ \"Non-vent\",\n    grepl(\"IntlDistrict\", LOCATION) ~ \"Non-vent\",\n    grepl(\"ASHES\", LOCATION) ~ \"Non-vent\",\n    TRUE ~ \"Vent\"\n  ))\n\n\n\n# Add in annotations, revise taxa\nas_is &lt;- c(\"Amoebozoa\", \"Apusozoa\", \"Excavata\", \"Hacrobia\", \"Archaeplastida\")\n\n# head(mean_gr_mcr_TPM_df)\n# head(taxfxn)\n\nlong_frenemies_annot &lt;- long_frenemies %&gt;%\n  left_join(taxfxn, by = \"SEQ_ID\") %&gt;%\n  separate(full_classification, c(\"Domain\", \"Supergroup\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus_spp\"), sep = \"; \", remove = FALSE) %&gt;%\n  mutate(SUPERGROUP_18S = case_when(\n    Phylum == \"Ciliophora\" ~ \"Alveolata-Ciliophora\",\n    Phylum == \"Dinophyta\" ~ \"Alveolata-Dinoflagellata\",\n    # Phylum == \"Perkinsea\" ~ \"Protalveolata\",\n    # Phylum == \"Colponemidia\" ~ \"Protalveolata\",\n    # Phylum == \"Chromerida\" ~ \"Protalveolata\",\n    Supergroup == \"Alveolata\" ~ \"Other Alveolata\",\n    Supergroup %in% as_is ~ Supergroup,\n    Supergroup == \"Haptista\" ~ \"Hacrobia\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    (Supergroup == \"Rhizaria\" & Phylum != \"Radiolaria\" & Phylum != \"Cercozoa\") ~ \"Rhizaria\",\n    Order == \"Bigyra\" ~ \"Stramenopiles-Opalozoa;Sagenista\",\n    Class == \"Ochromonadales\" ~ \"Stramenopiles-Ochrophyta\",\n    Supergroup == \"Stramenopiles\" ~ \"Stramenopiles\",\n    Supergroup == \"Opisthokonta\" ~ \"Opisthokonta\",\n    (is.na(Supergroup) | Supergroup == \"Eukaryota incertae sedis\") ~ \"Unknown Eukaryota\",\n    TRUE ~ \"Other-metaT only\"))\n\ncat(\"Completed data anneal, output:\\n\")\n\nhead(long_frenemies_annot)\n\n# Save output R object files\nsave(long_frenemies, long_frenemies_annot, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/frenemies-longdfs-gr-mcr.RData\")\ncat(\"SAVED\\n\")\n\ncat(\"switching to making matrices for use:\")\n# head(mean_gr_mcr_TPM_df)\n# head(long_frenemies)\nmatrix_frenemies &lt;- long_frenemies %&gt;% \n  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = \"_\") %&gt;% \n  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification) %&gt;% \n  distinct() %&gt;% \n  group_by(SEQ_ID, SAMPLE_NAME) %&gt;% \n    summarise(SUM_TPM = sum(scaledTPM)) %&gt;% \n  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %&gt;% \n  as.matrix\n\nmatrix_frenemies_ventonly &lt;- long_frenemies %&gt;% \n  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = \"_\") %&gt;% \n  filter(VENT_BIN = \"Vent\") %&gt;% \n  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification) %&gt;% \n  distinct() %&gt;% \n  group_by(SEQ_ID, SAMPLE_NAME) %&gt;% \n  summarise(SUM_TPM = sum(scaledTPM)) %&gt;% \n  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %&gt;% \n  as.matrix\n\nmatrix_frenemies_ciliates &lt;- long_frenemies_annot %&gt;%\n  filter(SUPERGROUP_18S == \"Alveolata-Ciliophora\") %&gt;% \n  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = \"_\") %&gt;% \n  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification, SUPERGROUP_18S) %&gt;% \n  distinct() %&gt;% \n  group_by(SEQ_ID, SAMPLE_NAME) %&gt;% \n    summarise(SUM_TPM = sum(scaledTPM)) %&gt;% \n  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %&gt;% \n  as.matrix\n\nmatrix_frenemies_ciliates_ventonly &lt;- long_frenemies_annot %&gt;%\n  filter(SUPERGROUP_18S == \"Alveolata-Ciliophora\") %&gt;% \n  filter(VENT_BIN = \"Vent\") %&gt;% \n  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = \"_\") %&gt;% \n  select(SEQ_ID, SAMPLE_NAME, scaledTPM, COG_category, GOs, KEGG_ko, PFAMs, full_classification, SUPERGROUP_18S) %&gt;% \n  distinct() %&gt;% \n  group_by(SEQ_ID, SAMPLE_NAME) %&gt;% \n  summarise(SUM_TPM = sum(scaledTPM)) %&gt;% \n  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %&gt;% \n  as.matrix\n\n# Ciliate taxa key\n# head(long_frenemies_annot)\nkey_taxa &lt;- long_frenemies_annot %&gt;% \n  select(SEQ_ID, full_classification, SUPERGROUP_18S) %&gt;% \n  distinct() %&gt;% \n  separate(full_classification, c(\"Domain\", \"Supergroup\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus_spp\"), sep = \"; \", remove = FALSE)\n\ncat(\"Saving data files:\\n\")\nsave(matrix_frenemies, matrix_frenemies_ventonly, key_taxa, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/matrix_frenemies.RData\")\n\nsave(matrix_frenemies_ciliates, matrix_frenemies_ciliates_ventonly, key_taxa, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/matrix_ciliates_frenemies.RData\")"
  },
  {
    "objectID": "metat-analysis-eukrhythmic.html#process-in-deseq",
    "href": "metat-analysis-eukrhythmic.html#process-in-deseq",
    "title": "eukrhythmic output",
    "section": "4.2 Process in DESeq",
    "text": "4.2 Process in DESeq\n\nUse tximport function to subset to data of interest.\nUse sample list, ensure sample names are synced. This sample list has the column metadata for DESeq input “design”\nUse DESeq’s DESeqDataSetFromTximport() to import data of interest.\nPerform transcript subsetting, so that transcripts should appear in more than 1 sample and have a total sum greater than 10. Also include a step to deal with zeroes by calculating a modified geometric mean (poscounts)\nReport and compile final results as the upregulated vs. downregulated transcripts in the given dataset.\n\nScript frenemies-deseq_FEB.R\n\n# Deseq values\nlibrary(tidyverse)\nlibrary(DESeq2)\nlibrary(tximport)\n\n# DESeq\nload(file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-feb-2025.RData\", verbose = TRUE)\n# txi_frenemies_mcr_gr, sample_merged_gr_mcr \n# save(txi_frenemies_mcr_gr, sample_merged_gr_mcr, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/tximport-feb-2025.RData\")\n\n\n# Import as DESeq object - use LIGHT in the design\ncat(\"Data imported. Starting DESeq from Txi,\\n\")\nds_output_gr_mcr &lt;- DESeqDataSetFromTximport(txi_frenemies_mcr_gr,\n                                          colData = sample_merged_gr_mcr,\n                                          design = ~0 + TYPE + SITE)\nds_output_gr_mcr\n\ngroupsize &lt;- 2 # Transcript to consider, must be in at least 3 samples\nkeep &lt;- rowSums(counts(ds_output_gr_mcr) &gt;= 10) &gt;= groupsize # And have &gt;= to 10 counts\n\nds_output_gr_mcr_filtered_0 &lt;- ds_output_gr_mcr[keep,]\nds_output_gr_mcr_filtered &lt;- estimateSizeFactors(ds_output_gr_mcr_filtered_0, type = 'poscounts')\n\n\n# Filtering stats:\ncat(\"\\nStarted with \", dim(ds_output_gr_mcr)[1], \"observations. Filtering by 2 samples and 10 counts resulted in,\", dim(ds_output_gr_mcr_filtered)[1], \", which is\", (100*(dim(ds_output_gr_mcr_filtered)[1]/dim(ds_output_gr_mcr)[1])), \"% of the data.\\n\\n\")\n\n\n## Re-level for comparison - set Vent as the reference.\nds_output_gr_mcr_filtered$TYPE &lt;- relevel(ds_output_gr_mcr_filtered$TYPE, ref = \"Vent\")\n\n# ds_tpm_output_filtered$TYPE_BIN &lt;- factor(ds_tpm_output_filtered$TYPE, levels = c(\"Non-vent\", \"Vent\"))\nde_output_frenemies &lt;- DESeq2::DESeq(ds_output_gr_mcr_filtered)\n\ncat(\"Report summary stats from DE analysis.\\n\")\n\ncat(\"Coefficient as it appears in the output:\\n\")\nresultsNames(de_output_frenemies)\n\nsummary(de_output_frenemies)\n# Rowname: indicating gene id\n# Column 1: baseMean, average expression level across all samples normalised by sequencing depth\n# Column 2: log2FoldChange, in this table above, of treated vs untreated\n# Column 6: padj, adjusted p-value, p-value corrected for multiple testing\n\nsave(de_output_frenemies, ds_output_gr_mcr_filtered, ds_output_gr_mcr, sample_merged_gr_mcr, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/DESeq-frenemies-output_FEB.RData\")\n## REVIEW:\n# https://introtogenomics.readthedocs.io/en/latest/2021.11.11.DeseqTutorial.html\n\nsave(de_output_frenemies, file = \"/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/DEoutput_only_frenemies_FEB.RData\")\n\nStarted with 37577784 observations. Filtering by 2 samples and 10 counts resulted in, 6435482 , which is 17.12576 % of the data for differential expression analysis."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "eukrhythmic"
  },
  {
    "objectID": "index.html#summary-of-microbes-need-frenemies-project",
    "href": "index.html#summary-of-microbes-need-frenemies-project",
    "title": "Home",
    "section": "",
    "text": "eukrhythmic"
  },
  {
    "objectID": "index.html#running-eukrhythmic",
    "href": "index.html#running-eukrhythmic",
    "title": "Home",
    "section": "2.1 Running eukrhythmic",
    "text": "2.1 Running eukrhythmic"
  },
  {
    "objectID": "index.html#compiling-output-files",
    "href": "index.html#compiling-output-files",
    "title": "Home",
    "section": "2.2 Compiling output files",
    "text": "2.2 Compiling output files"
  },
  {
    "objectID": "index.html#data-analysis",
    "href": "index.html#data-analysis",
    "title": "Home",
    "section": "2.3 Data analysis",
    "text": "2.3 Data analysis"
  },
  {
    "objectID": "eukrhythmic-parameters.html",
    "href": "eukrhythmic-parameters.html",
    "title": "eukrhythmic parameters",
    "section": "",
    "text": "Running eukrhythmic for deep-sea hydrothermal vent samples."
  }
]