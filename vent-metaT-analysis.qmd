---
title: "Vent metatranscriptome data analysis"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

# Microbes Need Frenemies

*Introduction to do*

From `metat-analysis-eukrhythmic.qmd` to here. (Feb 2025)

## Set up

```{r, message=FALSE, warning=FALSE}
# | message: false
library(tidyverse)
library(DESeq2)
library(ggdendro); library(ggalluvial); library(ggupset)
library(treemapify)
library(patchwork)
library(compositions); library(vegan)
```

## Move HPC generated items locally

Run `scripts/frenemies-compile-dfs-FEB.R`.

Import long data frames of all data.

```{r}
load("input-docs/frenemies-longdfs-gr-mcr.RData", verbose = TRUE)
```

Subset Gorda Ridge and Mid-Cayman Rise hydrothermal vent metatranscriptome samples from the entire dataset. This section was run on HPC for subsetting. Estimated the mean of scaled TPM from tximport command. This is the correct TPM values that incorporate transcript length. When replicates were run across different flow cells (REP 1 vs. REP 2), these were averaged. Rownames equal the transcript IDs. Transcript IDs were joined with tax and function annotations.

```{r}
glimpse(long_frenemies_annot)
unique(long_frenemies_annot$SUPERGROUP_18S)
```

Import matrices (`frenemies-matrix.R`)

```{r}
# load("input-docs/matrix_frenemies.RData", verbose = TRUE)
load("input-docs/matrix_ciliates_frenemies.RData", verbose = TRUE)
```

Import metadata

```{r}
metadata <- read_delim("input-docs/metadata.txt")
glimpse(metadata)
```

### Assign sample order and colors.

To make downstream figures consistent with one another we can use the below naming schematics.

```{r}
order_sample_names <- c("Von Damm_Vent_ArrowLoop", "Von Damm_Vent_Bartizan", "Von Damm_Vent_MustardStand", "Von Damm_Vent_OldManTree", "Von Damm_Vent_Ravelin2", "Von Damm_Vent_ShrimpHole", "Von Damm_Vent_WhiteCastle", "Von Damm_Vent_X18", "Von Damm_Non-vent_Plume", "Von Damm_Non-vent_Background", "Piccard_Vent_Lotsoshrimp", "Piccard_Vent_Shrimpocalypse", "Piccard_Non-vent_Plume", "Piccard_Non-vent_Background", "Gorda Ridge_Vent_Candelabra", "Gorda Ridge_Vent_MtEdwards", "Gorda Ridge_Vent_SirVentsAlot", "Gorda Ridge_Vent_VentiLatte", "Gorda Ridge_Non-vent_Plume", "Gorda Ridge_Non-vent_BSW")

label_sample_names <- c("Von Damm Vent ArrowLoop", "Von Damm Vent Bartizan", "Von Damm Vent MustardStand", "Von Damm Vent OldManTree", "Von Damm Vent Ravelin2", "Von Damm Vent ShrimpHole", "Von Damm Vent WhiteCastle", "Von Damm Vent X18", "Von Damm Non-vent Plume", "Von Damm Non-vent Background", "Piccard Vent Lotsoshrimp", "Piccard Vent Shrimpocalypse", "Piccard Non-vent Plume", "Piccard Non-vent Background", "Gorda Ridge Vent Candelabra", "Gorda Ridge Vent MtEdwards", "Gorda Ridge Vent SirVentsAlot", "Gorda Ridge Vent VentiLatte", "Gorda Ridge Non-vent Plume", "Gorda Ridge Non-vent BSW")

label_sample_names_SHORT <- c("ArrowLoop", "Bartizan", "MustardStand", "OldManTree", "Ravelin2", "ShrimpHole", "WhiteCastle", "X18", "Plume", "Background", "Lotsoshrimp", "Shrimpocalypse", "Plume", "Background", "Candelabra", "MtEdwards", "SirVentsAlot", "VentiLatte", "Plume", "BSW")

order_field <- c("Von Damm", "Piccard", "Gorda Ridge")
color_field <- c("#B56576", "#355070", "#EAAC8B")
order_bin <- c("Vent", "Non-vent")
color_bin <- c("#070600", "#DDDDDD")
```

```{r}
### Align with sample IDs for these samples
metadata_metaT <- metadata %>% 
  pivot_longer(TEMP:GrazingEffect_hr, names_to = "VARIABLES", values_to = "VALUES") %>% 
  group_by(SAMPLE_NAME, VARIABLES) %>% 
  summarise(VALUE = mean(VALUES)) %>% 
  separate(SAMPLE_NAME, into = c("VENT_FIELD", "VENT_BIN", "LOCATION"), sep = "_", remove = FALSE) %>% 
  right_join((long_frenemies_annot %>% 
  select(fieldyear, LOCATION, SAMPLETYPE, VENT_FIELD, VENT_BIN) %>% 
  distinct())) %>% 
    mutate(SAMPLE_NAME_ORDER = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names),
         SAMPLE_NAME_ORDER_label = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names_SHORT),
         FIELD_ORDER = factor(VENT_FIELD, levels = order_field),
         BIN_ORDER = factor(VENT_BIN, levels = order_bin))

glimpse(metadata_metaT)
```

> Write an output table for all sample types for supplementary information.

```{r}
# full_sample_list <- metadata_metaT %>% 
```

```{r}
key_sample <- metadata_metaT %>% 
  select(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, fieldyear, SAMPLETYPE) %>% 
  distinct() %>% 
  mutate(SAMPLE_NAME_ORDER = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names),
         SAMPLE_NAME_ORDER_label = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names_SHORT),
         FIELD_ORDER = factor(VENT_FIELD, levels = order_field),
         BIN_ORDER = factor(VENT_BIN, levels = order_bin))
#   facet_grid(cols = vars(VENT_BIN, VENT_FIELD), scales = "free", space = "free") +

```

```{r}
key_fxn <- long_frenemies_annot %>% 
  select(SEQ_ID, SequenceID, KEGG, PFAMs)
```

# Import and include KEGG IDs

Previously curated and parsed KEGG ID table. Note that KEGG IDs are often duplicated as the orthology information is repeated and individual KEGGs belong to different kinds of

```{r}
kegg <- read.csv("../KEGG_DB/combined_kegg.csv") %>% 
  select(KEGG = KO_number, everything(), -X)

curated_kegg <- read.csv("../KEGG_DB/kegg_curation_SKHU_Oct2024.csv", na.strings = "NA")

# Join to include all KEGG IDs and curated list.
kegg_key <- kegg %>% 
  distinct() %>% 
  left_join(curated_kegg, multiple = "all", by = join_by(KEGG)) 
```

```{r}
# head(euk_long_frenemies_annot)
kegg_seq_id <- euk_long_frenemies_annot %>% 
  select(SEQ_ID, PFAMs, KEGG) %>% distinct() %>% 
  separate_longer_delim(KEGG, delim = ",") %>%
  mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  left_join(kegg_key)
# head(kegg_seq_id)
```

# Plot environmental parameters

Use the key_sample dataframe as an outline to plot each tile plot. Environmental parameters will be shown as a heat map.

```{r, fig.height=6, fig.width=10}
bin <- key_sample %>% 
  # filter(VENT_FIELD != "Gorda Ridge") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = 0, fill = BIN_ORDER)) +
  scale_fill_manual(values = color_bin) + 
  geom_tile(color = "black", linewidth = 0.5) +
  # coord_flip() +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))

field <- key_sample %>% 
  # filter(VENT_FIELD != "Gorda Ridge") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = 0, fill = FIELD_ORDER)) +
  scale_fill_manual(values = color_field) + 
  geom_tile(color = "black", linewidth = 0.5) +
  # coord_flip() +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))


# bin + field + patchwork::plot_layout(nrow = 2)
# ggsave("figures/categories.pdf", width = 7, height = 9, device = "pdf", limitsize = FALSE)
```

## Geochemical heatmap metadata

```{r, fig.height=9, fig.width=10}
temp <- metadata_metaT %>% 
  filter(VARIABLES == "TEMP") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = VARIABLES, fill = VALUE)) +
  geom_tile(stat = "identity", linewidth = 0.5, color = "black") +
  scale_fill_gradient(low = "#fee0d2", high = "#cb181d") +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))
# 
ph <- metadata_metaT %>% 
    filter(VARIABLES == "pH") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = VARIABLES, fill = VALUE)) +
  geom_tile(stat = "identity", linewidth = 0.5, color = "black") +
  scale_fill_gradient(low = "#fee0d2", high = "#cb181d") +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))
# 
methane <- metadata_metaT %>% 
    filter(VARIABLES == "CH4") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = VARIABLES, fill = VALUE)) +
  geom_tile(stat = "identity", linewidth = 0.5, color = "black") +
  scale_fill_gradient(low = "#fee0d2", high = "#cb181d") +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))
  # patchwork::plot_layout(nrow = 3)
# ?ggsave()
# ggsave("figures/heatmap-env-params.pdf", width = 10, height = 9, device = "pdf", limitsize = FALSE)
```

## Biological heatmap metadata

```{r, fig.height=9, fig.width=10}
prok <- metadata_metaT %>% 
  filter(VARIABLES == "ProkConc") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = VARIABLES, fill = VALUE)) +
  geom_tile(stat = "identity", linewidth = 0.5, color = "black") +
  scale_fill_gradient(low = "#c6dbef", high = "#08306b") +
  # coord_flip() +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))

euk <- metadata_metaT %>% 
  filter(VARIABLES == "EukConc") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = VARIABLES, fill = VALUE)) +
  geom_tile(stat = "identity", linewidth = 0.5, color = "black") +
  scale_fill_gradient(low = "#c6dbef", high = "#08306b") +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))

graze <- metadata_metaT %>% 
  filter(VARIABLES == "GrazingEffect_hr") %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = VARIABLES, fill = VALUE)) +
  geom_tile(stat = "identity", linewidth = 0.5, color = "black") +
  scale_fill_gradient(low = "#c6dbef", high = "#08306b") +
  theme_classic() +
  labs(x = "", y = "") +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  scale_x_discrete(expand = c(0,0)) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0))

# ggsave("figures/heatmap-biol-params_2.pdf", width = 10, height = 9, device = "pdf", limitsize = FALSE)
```

```{r, fig.height=18.5, fig.width=10}
bin + field + temp + ph + methane + prok + euk + graze +
  patchwork::plot_layout(ncol = 1)
# ggsave("figures/heatmap-biogeochem.pdf", width = 10, height = 18.5, device = "pdf", limitsize = FALSE)
```

### Cluster analysis for samples based on environmental data

```{r}
head(metadata_metaT)
```

Convert to numerics and standardize

```{r}
metadata_metaT_vent_wide_numeric <- metadata_metaT %>% 
  filter(VENT_BIN == "Vent") %>% 
  select(SAMPLE_NAME, VARIABLES, VALUE) %>% 
  pivot_wider(names_from = VARIABLES, values_from = VALUE, values_fill = NA) %>% 
  column_to_rownames(var = "SAMPLE_NAME") %>% 
  as.matrix
# head(metadata_metaT_wide_numeric)  
```

Standardize

```{r}
# ?decostand()
sample_metadata_stand <- decostand(t(metadata_metaT_vent_wide_numeric), na.rm = TRUE, method = "standardize")
# glimpse(sample_metadata_stand)
# head(sample_metadata_stand)
```

Dendrogram plot

```{r}
dendro_env <- hclust(dist(t(sample_metadata_stand)), method = "average")
# ?hclust()

dendro_plot_env <- ggdendro::dendro_data(as.dendrogram(dendro_env), type = "rectangle")
label_dendro_order <- as.character(dendro_plot_env$labels$label)
```

```{r}
dendro_plot_output <- ggplot(segment(dendro_plot_env)) + 
  geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) + 
  coord_flip() + 
  scale_y_reverse(expand = c(0.2, 0.5), breaks = c(0, 0.2, 0.4, 0.6, 0.8)) + 
  geom_text(aes(x = x, y = y, label = label, angle = 0, hjust = 0), data = label(dendro_plot_env)) + 
  theme_dendro() + 
  # labs(y = "Dissimilarity", title = "Jaccard distance") + 
  theme(axis.text.x = element_text(color = "black", size = 14), 
        axis.line.x = element_line(color = "#252525"), 
        axis.ticks.x = element_line(), axis.title.x = element_text(color = "black", size = 14))
dendro_plot_output
```

# Ciliate taxonomic groups across hydrothermal vents

*(1) What is the distribution and diversity of ciliate transcripts across hydrothermal vents?*

*(2) How similar to prior genetic surveys are the metatranscriptome results?*

*(3) Is there a specific vent taxonomic signature among ciliate transcripts found?*

**What are some hypothesized life styles?**

## Complete taxonomic breakdown of TPMs

## 1. Taxonomic breakdown, focus on ciliates

```{r}
all_taxa_metat_order <- c("Alveolata-Ciliophora", "Alveolata-Dinoflagellata", "Other Alveolata", "Amoebozoa", "Apusozoa","Excavata", "Hacrobia","Archaeplastida",  "Rhizaria-Radiolaria","Rhizaria-Cercozoa","Rhizaria",  "Stramenopiles", "Stramenopiles-Opalozoa;Sagenista","Stramenopiles-Ochrophyta",  "Opisthokonta", "Other-metaT only", "Unknown Eukaryota")

all_taxa_metat_color = c("#fa9fb5", "#c51b8a", "#67000d", "#ef3b2c", "#ffffcc", "#feb24c","#cc4c02", "#c7e9b4", "#238b45", "#c6dbef", "#00441b", "#99d8c9","#1d91c0",  "#9e9ac8", "#54278f", "#bdbdbd", "#252525", "#f0f0f0")
```

### By domain

```{r}
tax_domain_supergroup <- long_frenemies_annot %>% 
  group_by(SUPERGROUP_18S, Domain, Supergroup, LOCATION, VENT_FIELD, VENT_BIN) %>%
    summarise(SUM_TPM = sum(scaledTPM))
tax_domain_supergroup$Domain[tax_domain_supergroup$Domain == ""] <- NA
```

```{r}
# unique(tax_domain_supergroup$Domain)
table(tax_domain_supergroup$Domain)
```

Plot domain across all samples.

```{r, fig.height=5, fig.width=7}
tax_domain_supergroup %>% 
  mutate(Domain = replace_na(Domain, "No Domain"),
         Domain = str_replace(Domain, "No supergroup", "No Domain")) %>% 
  group_by(Domain, LOCATION, VENT_FIELD, VENT_BIN) %>% 
  summarise(SUM_BY_DOMAIN = sum(SUM_TPM)) %>% 
  mutate(
         field_ORDER = factor(VENT_FIELD, levels = order_field),
         bin_ORDER = factor(VENT_BIN, levels = order_bin)) %>% 
  ggplot(aes(x = LOCATION, y = SUM_BY_DOMAIN, fill = Domain)) +
    geom_bar(stat = "identity", color = "black") +
    facet_grid(cols = vars(field_ORDER), scales = "free_x", space = "free") +
  theme_classic() +
  scale_y_continuous(expand = c(0,0)) +
  theme(legend.position = "right", legend.title = element_blank(),
        strip.text.x = element_text(color = "black", face = "bold", size = 14),
        strip.background = element_blank(),
        # strip.placement = "outside",
        axis.text.x = element_text(color = "black", face = "bold", size = 12, angle = 45, hjust = 1, vjust = 1),
        axis.title = element_text(color = "black", face = "bold", size = 14),
        axis.text.y = element_text(color = "black", face = "bold", size = 14),
        panel.grid.major = element_line(color = "#d9d9d9", linewidth = 0.3)) +
  labs(x = "", y = "TPM total")
```

Plot domain across all samples. Repeat out of 100%

```{r, fig.height=5, fig.width=7}
tax_domain_supergroup %>% 
  mutate(Domain = replace_na(Domain, "No Domain"),
         Domain = str_replace(Domain, "No supergroup", "No Domain")) %>% 
  group_by(Domain, LOCATION, VENT_FIELD, VENT_BIN) %>% 
  summarise(SUM_BY_DOMAIN = sum(SUM_TPM)) %>% 
  mutate(
         field_ORDER = factor(VENT_FIELD, levels = order_field),
         bin_ORDER = factor(VENT_BIN, levels = order_bin)) %>% 
  ggplot(aes(x = LOCATION, y = SUM_BY_DOMAIN, fill = Domain)) +
    geom_bar(stat = "identity", color = "black", position = "fill") +
    facet_grid(cols = vars(field_ORDER), scales = "free_x", space = "free") +
  theme_classic() +
  scale_y_continuous(expand = c(0,0)) +
  theme(legend.position = "right", legend.title = element_blank(),
        strip.text.x = element_text(color = "black", face = "bold", size = 14),
        strip.background = element_blank(),
        # strip.placement = "outside",
        axis.text.x = element_text(color = "black", face = "bold", size = 12, angle = 45, hjust = 1, vjust = 1),
        axis.title = element_text(color = "black", face = "bold", size = 14),
        axis.text.y = element_text(color = "black", face = "bold", size = 14),
        panel.grid.major = element_line(color = "#d9d9d9", linewidth = 0.3)) +
  labs(x = "", y = "TPM Relative Abundance")
```

### Eukaryotes - only

Prepare a eukaryotes only dataframe.

```{r}
head(long_frenemies_annot)
```

Create a table showing the loss of "Unknown Eukaryote" and unannotated.

```{r}
unique(long_frenemies_annot$SUPERGROUP_18S)
```

Isolate taxa that need to be curated too.

```{r}
other_tax <- long_frenemies_annot %>% 
  filter(Domain == "Eukaryota") %>% 
  filter(SUPERGROUP_18S == "Other-metaT only" | SUPERGROUP_18S == "Other Alveolata") %>% 
  select(full_classification:Genus_spp) %>% 
  distinct()
```

Stats on what we are removing.

```{r}
long_frenemies_annot %>% 
  filter(scaledTPM > 0) %>% 
  mutate(ANNOTATION = case_when(
    (Domain == "Eukaryota" & SUPERGROUP_18S == "Unknown Eukaryota") ~ "Unannotated eukaryote",
    (Domain == "Eukaryota" & SUPERGROUP_18S != "Unknown Eukaryota") ~ "Annotated eukaryote",
    (Domain != "Eukaryota" | is.na(Domain) | Domain == "") ~ "Non-eukaryote annotation or None",
  )) %>% 
  group_by(ANNOTATION) %>% 
  summarise(COUNT = n(),
            TPM_SUM = sum(scaledTPM))

length(unique(long_frenemies_annot$SEQ_ID))
```

Focusing on 455,691 total transcripts with a TPM SUM of 1,3781,599. There are 12 million more transcripts that did not get an annotation or were annotated as non-eukaryote.

Re-curate dataframes for eukaryotes only.

```{r}
unique(long_frenemies_annot$SUPERGROUP_18S)
```

```{r}
euk_long_frenemies_annot <- long_frenemies_annot %>% 
  filter(Domain == "Eukaryota") %>% 
  mutate(SUPERGROUP_18S = case_when(
    (Supergroup == "Rhizaria" & is.na(Phylum)) ~ "Rhizaria",
    Supergroup == "Breviatea" ~ "Breviatea",
    Supergroup == "CRuMs" ~ "CRuMs",
    Supergroup == "Ancyromonadida" ~ "Ancyromonadida",
    Supergroup == "Rhodelphea" ~ "Archaeplastida",
    (Supergroup == "Alveolata" & Phylum == "Apicomplexa") ~ "Alveolata-Apicomplexa", 
    (Supergroup == "Alveolata" & (Phylum == "Colpodellida" | Phylum == "Colponemidia")) ~ "Alveolata-Colponemids", 
    (Supergroup == "Alveolata" & Phylum == "Perkinsea") ~ "Alveolata-Perkinsea", 
    TRUE ~ SUPERGROUP_18S
  )) 
unique(euk_long_frenemies_annot$VENT_FIELD)  
all_taxa_color = c("#fa9fb5", "#c51b8a", "#67000d","#a18684", "#ef3b2c","#ffffcc", "#feb24c","#f2f540", "#a3450a", "#ade64c","#c7e9b4", "#238b45", "#07e8bf","#c6dbef", "#99d8c9","#1d91c0", "#253494", "#9e9ac8", "#8a07e8", "#e0bfff","#bdbdbd", "#252525", "#f0f0f0")

```

#### Supergroup level

```{r, fig.height=8, fig.width=12}
euk_long_frenemies_annot %>% 
  filter(SUPERGROUP_18S != "Unknown Eukaryota") %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>% 
  mutate(SAMPLE_NAME_ORDER = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names),
         FIELD_ORDER = factor(VENT_FIELD, levels = order_field),
         BIN_ORDER = factor(VENT_BIN, levels = order_bin),
         TAXA_ORDER = factor(SUPERGROUP_18S, levels = all_taxa_metat_order)) %>% 
  group_by(TAXA_ORDER, SUPERGROUP_18S, SAMPLE_NAME, SAMPLE_NAME_ORDER, FIELD_ORDER, BIN_ORDER) %>% 
  summarise(SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER, fill = SUPERGROUP_18S, y = SUM_TPM)) +
    geom_bar(stat = "identity", position = "fill", color = "black") +
  # scale_fill_manual(values = all_taxa_metat_color) +
  labs(x = "Relative TPM Abundance", y = "") +
  theme_classic() +
  scale_y_continuous(expand = c(0,0)) +
  scale_fill_manual(values = all_taxa_color) +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), scales = "free", space = "free") +
  theme(legend.position = "left", legend.title = element_blank(),
        strip.text.x = element_text(color = "black", face = "bold", size = 14),
        strip.background = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", size = 12, angle = 45, hjust = 1, vjust = 1),
        axis.title = element_text(color = "black", face = "bold", size = 14),
        axis.text.y = element_text(color = "black", face = "bold", size = 14),
        panel.grid.major = element_line(color = "#d9d9d9", linewidth = 0.3))
# ggsave("figures/taxa_MCR.svg", width = 6, height = 8, device = "svg", limitsize = FALSE)
```

Table summary stats of eukaryotic placement.

```{r}
euk_long_frenemies_annot %>% 
  group_by(SUPERGROUP_18S) %>% 
  summarise(SUM_TPM = sum(scaledTPM),
            COUNT_TRANSCRIPTS = n())
```

### Ciliates

Within ciliates, what is the distribution that have an annotation beyond ciliate?

```{r}
euk_long_frenemies_annot %>% 
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  group_by(Phylum, Class) %>% 
  summarise(SUM_TPM = sum(scaledTPM),
            COUNT_transcripts = n())
```

```{r}
class_order <- c("Colpodea", "Oligohymenophorea", "Nassophorea","Phyllopharyngea", "Plagiopylea", "Prostomatea", #conthreep
                 "Spirotrichea", "Armophorea", "Litostomatea","Muranotrichea", "Parablepharismea", #intramacronuleata or SAL (Rotterova et al. 2020)
                     "Heterotrichea", "Undetermined ciliophora")
class_color_order <- c("#450be3", "#b29af5", "#078ff7","#b0d7f5", "#099c70", "#8ce6cb",
                 "#ed4132", "#ed9087", "#e39a1b","#e0c18b", "#e0e329",
                 "#b02095", "#40373e")

```

```{r, fig.height=7, fig.width=10}
euk_long_frenemies_annot %>% 
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>% 
  mutate(SAMPLE_NAME_ORDER = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names),
         CLASS_NAME_ORDER = factor(Class, levels = class_order),
         FIELD_ORDER = factor(VENT_FIELD, levels = order_field),
         BIN_ORDER = factor(VENT_BIN, levels = order_bin)) %>% 
  group_by(CLASS_NAME_ORDER, SAMPLE_NAME_ORDER, FIELD_ORDER, BIN_ORDER) %>% 
  summarise(SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER, fill = CLASS_NAME_ORDER, y = SUM_TPM)) +
    geom_bar(stat = "identity", position = "fill", color = "black") +
  scale_fill_manual(values = class_color_order) +
  labs(y = "Relative TPM Abundance", x = "") +
  theme_classic() +
  scale_y_continuous(expand = c(0,0)) +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), space = "free", scales = "free") +
  theme(legend.position = "left", legend.title = element_blank(),
        strip.text.x = element_text(color = "black", face = "bold", size = 10),
        strip.background = element_blank(),
        # strip.placement = "outside",
        axis.text.x = element_text(color = "black", face = "bold", size = 10, angle = 45, hjust = 1, vjust = 1),
        axis.title = element_text(color = "black", face = "bold", size = 14),
        axis.text.y = element_text(color = "black", face = "bold", size = 14),
        panel.grid.major = element_line(color = "#d9d9d9", linewidth = 0.3))
# ggsave("figures/taxa_MCR.svg", width = 6, height = 8, device = "svg", limitsize = FALSE)
```

```{r, fig.height=12, fig.width=8}
euk_long_frenemies_annot %>% 
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>%
  unite(Order_family, Order, Family, sep = "_", remove = FALSE) %>% 
  mutate(SAMPLE_NAME_ORDER = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names),
         FIELD_ORDER = factor(VENT_FIELD, levels = order_field),
         BIN_ORDER = factor(VENT_BIN, levels = order_bin)) %>% 
  ungroup() %>% 
  group_by(Class, Order_family, SAMPLE_NAME_ORDER, FIELD_ORDER, BIN_ORDER, full_classification) %>% 
    mutate(MEAN_ALL = mean(scaledTPM)) %>% 
  ungroup() %>% 
  group_by(Class, Order_family, SAMPLE_NAME_ORDER, FIELD_ORDER, BIN_ORDER) %>% 
    summarise(SUM_TPM = sum(scaledTPM),
              ZSCORE = (scaledTPM - mean(scaledTPM)) / sd(scaledTPM)) %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER, fill = log(SUM_TPM), y = Order_family)) +
    geom_tile(stat = "identity", color = "black") +
  facet_grid(rows = vars(Class), cols = vars(FIELD_ORDER, BIN_ORDER), space = "free", scales = "free") +
  scale_fill_gradientn(colors = c("#f9f37c", "#ff9b35", "#bd370a", "#c85200", "#5e0000")) +
  labs(x = "", y = "") +
  theme_classic() +
  theme(legend.position = "right", legend.title = element_blank(),
        strip.text.y = element_text(color = "black", face = "bold", size = 7),
        strip.background = element_blank(),
        # strip.placement = "outside",
        axis.text.x = element_text(color = "black", face = "bold", size = 8, angle = 45, hjust = 1, vjust = 1),
        axis.title = element_text(color = "black", face = "bold", size = 8),
        axis.text.y = element_text(color = "black", face = "bold", size = 8),
        panel.grid.major = element_line(color = "#d9d9d9", linewidth = 0.3))
# ggsave("figures/taxa_MCR.svg", width = 6, height = 8, device = "svg", limitsize = FALSE)
```

## 2. Compare with prior genetic surveys

insert 18S analysis here

## 3. Vent versus non-vent transcript signature

```{r, fig.height=5, fig.width=7}
euk_long_frenemies_annot %>% 
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>%
  mutate(SAMPLE_NAME_ORDER = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names),
         FIELD_ORDER = factor(VENT_FIELD, levels = order_field),
         CLASS_ORDER = factor(Class, levels = rev(class_order)),
         BIN_ORDER = factor(VENT_BIN, levels = order_bin)) %>% 
  group_by(CLASS_ORDER, SAMPLE_NAME_ORDER, FIELD_ORDER, BIN_ORDER) %>% 
    summarise(SUM_TPM = sum(scaledTPM),
              ZSCORE = (scaledTPM - mean(scaledTPM)) / sd(scaledTPM)) %>% 
  ggplot(aes(x = SAMPLE_NAME_ORDER, fill = log(SUM_TPM), y = CLASS_ORDER)) +
    geom_tile(stat = "identity", color = "black") +
  facet_grid(cols = vars(FIELD_ORDER, BIN_ORDER), space = "free", scales = "free") +
  scale_fill_gradientn(colors = c("#f9f37c", "#ff9b35", "#bd370a", "#c85200", "#5e0000")) +
  labs(x = "", y = "") +
  theme_classic() +
  theme(legend.position = "right", legend.title = element_blank(),
        strip.text.y = element_text(color = "black", face = "bold", size = 7),
        strip.background = element_blank(),
        # strip.placement = "outside",
        axis.text.x = element_text(color = "black", face = "bold", size = 8, angle = 45, hjust = 1, vjust = 1),
        axis.title = element_text(color = "black", face = "bold", size = 8),
        axis.text.y = element_text(color = "black", face = "bold", size = 8),
        panel.grid.major = element_line(color = "#d9d9d9", linewidth = 0.3))
# ggsave("figures/taxa_MCR.svg", width = 6, height = 8, device = "svg", limitsize = FALSE)
```

### 3a. Transcript enrichment at vent vs. non vent for ciliate classes.

Use a distance matrix to look at this as well.

Files to use: matrix_frenemies_ciliates matrix_frenemies_ciliates_ventonly key_taxa

Isolate transcripts present in both background and vent for each ciliate class.

```{r}
class_order <- c("Colpodea", "Oligohymenophorea", "Nassophorea","Phyllopharyngea", "Plagiopylea", "Prostomatea", #conthreep
                 "Spirotrichea", "Armophorea", "Litostomatea","Muranotrichea", "Parablepharismea", #intramacronuleata or SAL (Rotterova et al. 2020)
                     "Heterotrichea", "Undetermined ciliophora")
class_color_order <- c("#450be3", "#b29af5", "#078ff7","#b0d7f5", "#099c70", "#8ce6cb",
                 "#ed4132", "#ed9087", "#e39a1b","#e0c18b", "#e0e329",
                 "#b02095", "#40373e")
```

```{r}
# Run this once. Remove dataframes if needed
rm(compiled_df_wclass); rm(df_out)

for (i in class_order){
    # Subset and wrangle
    toclass_df <- euk_long_frenemies_annot %>% 
      filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
      mutate(Class = case_when(
        is.na(Class) ~ "Undetermined ciliophora",
        Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
        TRUE ~ Class
      )) %>% 
      filter(Class == i) %>% 
      unite(SAMPLE_KEY, SEQ_ID, VENT_FIELD, full_classification, sep = ";;") %>% 
      select(SAMPLE_KEY, scaledTPM, VENT_BIN) %>% 
      pivot_wider(names_from = VENT_BIN, values_from = scaledTPM, values_fn = sum, values_fill = NA) %>% 
      drop_na() %>% 
      pivot_longer(cols = `Non-vent`:`Vent`, names_to = "VENT_BIN", values_to = "scaledTPM") %>% 
      separate(SAMPLE_KEY, c("SEQ_ID", "VENT_FIELD", "full_classification"), sep = ";;") %>% 
      unite(SAMPLE_KEY, VENT_BIN, VENT_FIELD, full_classification, sep = ";;") %>% 
      pivot_wider(names_from = SAMPLE_KEY, values_from = scaledTPM) %>%
      column_to_rownames(var = "SEQ_ID") %>% 
      as.matrix
      #
      # Normalize
      ciliate_class_clr_enrich <- decostand(toclass_df, na.rm = TRUE, method = "total")
      #
      # Make df_out
      df_out <- data.frame(ciliate_class_clr_enrich) %>% 
        rownames_to_column(var = "SEQ_ID") %>% 
        pivot_longer(cols = -c(SEQ_ID), names_to = "SAMPLE_NAME", values_to = "VALUE") %>% 
        add_column(CLASS = i)
      print(paste("Done with", i))
      #
      if (!(exists("compiled_df_wclass"))){
        compiled_df_wclass <- df_out
        } else{
          compiled_df_wclass <- rbind(compiled_df_wclass, df_out)
        }
      }

# unique(compiled_df_wclass$CLASS)

```

Transcripts were subset by class level, and then filters so they had to have appeared in both vent and non-vent samples. Then, each subset data were normalized with `decostand()` option total. Below, I am importing the KEGG Gene IDs (or PFAMs when needed), changing non-vent to negative values, and plotting results to see differential TPMs for transcripts that appear within and outside of the vent sites.

```{r, fig.width=12, fig.height=5}
class_order <- c("Colpodea", "Oligohymenophorea", "Nassophorea","Phyllopharyngea", "Plagiopylea", "Prostomatea",
                 "Spirotrichea", "Armophorea", "Litostomatea","Muranotrichea", "Parablepharismea",
                     "Heterotrichea", "Undetermined ciliophora")

compiled_df_wclass %>% 
  filter(CLASS == "Undetermined ciliophora") %>% 
  left_join(kegg_seq_id %>% select(SEQ_ID, PFAMs, Gene_identification) %>% distinct()) %>% 
  mutate(GENE_ID = case_when(
    is.na(Gene_identification) & is.na(PFAMs) ~ "No gene ID",
    is.na(Gene_identification) & !(is.na(PFAMs)) ~ "No gene ID",
    !(is.na(Gene_identification)) ~ Gene_identification
  )) %>% 
  separate(SAMPLE_NAME, c("VENT_BIN", "VENT_FIELD", "full_classification"), sep = "\\.\\.") %>% 
  mutate(VENT_BIN = str_replace(VENT_BIN, pattern = "Non.vent", "Non-vent")) %>% 
  mutate(NORM_ENRICH = case_when(VENT_BIN == "Vent" ~ VALUE,
                                 VENT_BIN != "Vent" ~ (VALUE * -1))) %>% 
  filter(!(GENE_ID == "No gene ID")) %>% 
  ggplot(aes(x = NORM_ENRICH, y = GENE_ID, fill = VENT_BIN)) + 
    geom_bar(stat = "identity", position = "stack") +
    facet_wrap(vars(CLASS), scales = "free", ncol = 4) +
    # facet_grid(rows = vars(CLASS), scales = "free", space = "free") +
    labs(x = "", y = "") +
    theme_classic() +
    theme(legend.position = "none",
      # axis.text.y = element_blank(),
      strip.text.x = element_text(color = "black", face = "bold", size = 10),
      strip.text.y = element_text(color = "black", face = "bold", size = 10),
      strip.background = element_blank(),
      axis.text.x = element_text(color = "black", face = "bold", size = 10, hjust = 1, vjust = 1),
      axis.text.y = element_text(color = "black", face = "bold", size = 10, hjust = 1, vjust = 0.5),
      axis.title = element_text(color = "black", face = "bold", size = 10))
```

```{r}
head(kegg_seq_id)
```

```{r, fig.height=12, fig.width=28}
compiled_df_wclass %>% 
  filter(CLASS != "Undetermined ciliophora") %>%
  left_join(kegg_seq_id %>% select(SEQ_ID, PFAMs, Gene_identification) %>% distinct()) %>% 
  mutate(GENE_ID = case_when(
    is.na(Gene_identification) & is.na(PFAMs) ~ "No gene ID",
    is.na(Gene_identification) & !(is.na(PFAMs)) ~ "No gene ID",
    !(is.na(Gene_identification)) ~ Gene_identification
  )) %>% 
  separate(SAMPLE_NAME, c("VENT_BIN", "VENT_FIELD", "full_classification"), sep = "\\.\\.") %>% 
  mutate(VENT_BIN = str_replace(VENT_BIN, pattern = "Non.vent", "Non-vent")) %>% 
  mutate(NORM_ENRICH = case_when(VENT_BIN == "Vent" ~ VALUE,
                                 VENT_BIN != "Vent" ~ (VALUE * -1))) %>% 
  filter(!(GENE_ID == "No gene ID")) %>% 
  # filter(!is.na(CLASSIFICATION_SPECIFIC)) %>% 
  ggplot(aes(x = GENE_ID, y = NORM_ENRICH, fill = CLASS)) + 
    geom_bar(stat = "identity", position = "stack") +
    # facet_wrap(vars(CLASS), scales = "free", ncol = 4) +
    # facet_grid(cols = vars(CLASSIFICATION_SPECIFIC), scales = "free", space = "free") +
    labs(x = "", y = "") +
    theme_classic() +
    theme(legend.position = "top",
      # axis.text.y = element_blank(),
      strip.text.x = element_text(color = "black", face = "bold", size = 10),
      strip.text.y = element_text(color = "black", face = "bold", size = 10),
      strip.background = element_blank(),
      axis.text.x = element_text(color = "black", face = "bold", size = 10, angle = 45,hjust = 1, vjust = 1),
      axis.text.y = element_text(color = "black", face = "bold", size = 10, hjust = 1, vjust = 0.5),
      axis.title = element_text(color = "black", face = "bold", size = 10))
```

Remake dist matrix to sum at ciliate Class level.

```{r}
head(euk_long_frenemies_annot)
range(euk_long_frenemies_annot$NUM_ZERO)

matrix_class <- euk_long_frenemies_annot %>% 
  # transcripts need to appear in more than 1 sample
  filter(NUM_ZERO < 21) %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>%
  group_by(SAMPLE_NAME, Class) %>% 
    summarise(SUM_TPM = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE_NAME, values_from = SUM_TPM, values_fill = 0) %>% 
  column_to_rownames(var = "Class") %>% 
  as.matrix
```

#### Heat map by class

```{r, fig.height=6, fig.width=10.5}
clr_class <- decostand(matrix_class, method = "rclr", MARGIN = 2)

class_order <- c("Colpodea", "Oligohymenophorea", "Nassophorea","Phyllopharyngea", "Plagiopylea", "Prostomatea", #conthreep
                 "Spirotrichea", "Armophorea", "Litostomatea","Muranotrichea", "Parablepharismea", #intramacronuleata or SAL (Rotterova et al. 2020)
                     "Heterotrichea", "Undetermined ciliophora")
class_color_order <- c("#450be3", "#b29af5", "#078ff7","#b0d7f5", "#099c70", "#8ce6cb",
                 "#ed4132", "#ed9087", "#e39a1b","#e0c18b", "#e0e329",
                 "#b02095", "#40373e")

data.frame(clr_class) %>% 
  rownames_to_column(var = "Class") %>% 
  pivot_longer(cols = -c(Class), names_to = "SAMPLE_NAME", values_to = "CLR") %>% 
  mutate(SAMPLE_NAME = str_replace(SAMPLE_NAME, pattern = "Non.vent", "Non-vent"),
         SAMPLE_NAME = str_replace(SAMPLE_NAME, pattern = "\\.", " ")
         ) %>% 
  left_join(metadata_metaT %>% 
              select(SAMPLE_NAME_ORDER_label, SAMPLE_NAME_ORDER_label, FIELD_ORDER, BIN_ORDER, VENT_BIN, LOCATION) %>%
              distinct()) %>% 
  mutate(CLASS_ORDER = factor(Class, levels = rev(class_order))) %>% 
ggplot(aes(x = SAMPLE_NAME_ORDER_label, y = CLASS_ORDER, fill = CLR)) +
  geom_tile(color = "black", linewidth = 0.5) +
  facet_grid(cols = vars(BIN_ORDER, FIELD_ORDER), scales = "free", space = "free") +
  labs(x = "", y = "") +
    scale_fill_steps2(
  # low = "#2166ac", mid = "white", high = "#b2182b", midpoint = 0, space = "Lab", na.value = "#4d4d4d",
  low = "#0e6180", mid = "#e8f9fa", high = "#ad268e", midpoint = 0, space = "Lab", na.value = "#4d4d4d",
  guide = "coloursteps",
  aesthetics = "fill") +
   # scale_fill_steps2(
  # low = "white", mid = "lightpink", high = "#b2182b", midpoint = 0.5, space = "Lab", na.value = "#4d4d4d",
  # guide = "coloursteps",
  # aesthetics = "fill") +
  theme_classic() +
  theme(axis.text.y = element_text(color = "black", face = "bold", size = 10),
        strip.text.x = element_text(color = "black", face = "bold", size = 10),
        strip.text.y = element_text(color = "black", face = "bold", size = 8),
        strip.background = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", size = 10, angle = 90, hjust = 1, vjust = 0.5),
        axis.title = element_text(color = "black", face = "bold", size = 10))

# ggsave("figures/heatmap-clr-ciliate-classes.pdf", width = 10.5, height = 6, device = "pdf", limitsize = FALSE)

```

```{r, fig.height=7, fig.width=4}
# head(euk_long_frenemies_annot)
# unique(euk_long_frenemies_annot$PFAMs)
euk_long_frenemies_annot %>% 
  filter(NUM_ZERO < 21) %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>%
  mutate(CLASS_ORDER = factor(Class, levels = rev(class_order))) %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>%
  mutate(SAMPLE_NAME_ORDER = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names),
         SAMPLE_NAME_ORDER_label = factor(SAMPLE_NAME, levels = order_sample_names, labels = label_sample_names_SHORT),
         FIELD_ORDER = factor(VENT_FIELD, levels = order_field),
         BIN_ORDER = factor(VENT_BIN, levels = order_bin)) %>% 
  mutate(ANNOT = case_when(
    (KEGG == "-" & PFAMs == "-") ~ "No annotation",
    TRUE ~ "Annotation"
  )) %>% 
  group_by(CLASS_ORDER) %>%
    summarise(TPM_SUM = sum(scaledTPM),
              TRANSCRIPT_COUNT = n()) %>%
ggplot(aes(y = CLASS_ORDER, x = 1, size = TRANSCRIPT_COUNT)) +
  geom_point(width = 1, stat = "identity", alpha = 0.3, color = "#636363", fill = "black") +
  labs(x = "", y = "") +
  scale_size(range = c(0.5, 20)) +
  theme_classic() +
  theme(axis.text.y = element_text(color = "black", face = "bold", size = 10),
        strip.text.x = element_text(color = "black", face = "bold", size = 10),
        strip.text.y = element_text(color = "black", face = "bold", size = 8),
        strip.background = element_blank(),
        axis.text.x = element_blank(),
        axis.line = element_blank(),
        axis.ticks = element_blank(),
        legend.title = element_blank(),
        axis.title = element_blank())

# ggsave("figures/total-transcripts-ciliate-class.pdf", width = 4, height = 7, device = "pdf", limitsize = FALSE)
```

# UpSetR plots

For ciliate taxa, what is shared across all samples?

```{r}
head(euk_long_frenemies_annot)
```

Transcripts are grouped by identity

```{r}
upset_input <- euk_long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  unite(GENE_INFO, PFAMs, KEGG, sep = "_") %>%
  group_by(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, Class, GENE_INFO) %>%
    summarise(SUM = sum(scaledTPM)) %>%
  distinct()
head(upset_input)
```

```{r, fig.height=5, fig.width=10}
upset_input %>%
  unite(field_bin, c(VENT_FIELD, VENT_BIN), sep = " ") %>%
  group_by(GENE_INFO) %>%
    summarise(SAMPLE = list(field_bin)) %>%
  ggplot(aes(x = SAMPLE)) +
    geom_bar(color = "#5c6e6c", fill = "#a6b7aa", width = 0.7) +
    ggupset::scale_x_upset(order_by = "freq", n_intersections = 30) +
    scale_y_continuous(expand = c(0,0)) +
    labs(x = "", y = "Shared transcripts", title = "Distribution of ciliate transcripts") +
    theme_classic() +
  theme(plot.margin = margin(2, 0, 0, 2, "cm"),
        axis.text = element_text(color = "black", face = "bold", size = 13),
        axis.title = element_text(color = "black", face = "bold", size = 13)) +
  theme_combmatrix(combmatrix.label.text = element_text(color = "black", face = "bold", size = 13),
                     combmatrix.label.extra_spacing = 3)
# ggsave("figures/upset_simple_taxa.svg", width = 10, height = 5, device = "svg", limitsize = FALSE)
```

Subset upsetR by vent vs. non-vent. Do we see more similarities in transcripts across the vent sites? or outside?

```{r, fig.height=8, fig.width=10}
head(upset_input)
upset_input %>%
  filter(VENT_BIN == "Vent") %>% 
  unite(vent_location, c(VENT_FIELD, LOCATION), sep = " ") %>%
  group_by(GENE_INFO) %>%
    summarise(SAMPLE = list(vent_location)) %>%
  ggplot(aes(x = SAMPLE)) +
    geom_bar(color = "#5c6e6c", fill = "#a6b7aa", width = 0.7) +
    ggupset::scale_x_upset(order_by = "freq", n_intersections = 30) +
    scale_y_continuous(expand = c(0,0)) +
    labs(x = "", y = "Shared transcripts", title = "Distribution of ciliate transcripts") +
    theme_classic() +
  theme(plot.margin = margin(2, 0, 0, 2, "cm"),
        axis.text = element_text(color = "black", face = "bold", size = 13),
        axis.title = element_text(color = "black", face = "bold", size = 13)) +
  theme_combmatrix(combmatrix.label.text = element_text(color = "black", face = "bold", size = 13),
                     combmatrix.label.extra_spacing = 3)
# ggsave("figures/upset_simple_taxa.svg", width = 10, height = 5, device = "svg", limitsize = FALSE)
```

```{r, fig.height=8, fig.width=10}
# head(upset_input)
upset_input %>%
  filter(VENT_BIN != "Vent") %>% 
  unite(vent_location, c(VENT_FIELD, LOCATION), sep = " ") %>%
  group_by(GENE_INFO) %>%
    summarise(SAMPLE = list(vent_location)) %>%
  ggplot(aes(x = SAMPLE)) +
    geom_bar(color = "#5c6e6c", fill = "#a6b7aa", width = 0.7) +
    ggupset::scale_x_upset(order_by = "freq", n_intersections = 30) +
    scale_y_continuous(expand = c(0,0)) +
    labs(x = "", y = "Shared transcripts", title = "Distribution of ciliate transcripts") +
    theme_classic() +
  theme(plot.margin = margin(2, 0, 0, 2, "cm"),
        axis.text = element_text(color = "black", face = "bold", size = 13),
        axis.title = element_text(color = "black", face = "bold", size = 13)) +
  theme_combmatrix(combmatrix.label.text = element_text(color = "black", face = "bold", size = 13),
                     combmatrix.label.extra_spacing = 3)
# ggsave("figures/upset_simple_taxa.svg", width = 10, height = 5, device = "svg", limitsize = FALSE)
```

What transcripts are shared across ciliate classes?

```{r}
head(upset_input)
upset_input %>%
  filter(VENT_BIN == "Vent") %>%
  group_by(GENE_INFO) %>%
    summarise(SAMPLE = list(Class)) %>%
  ggplot(aes(x = SAMPLE)) +
    geom_bar(color = "#5c6e6c", fill = "#a6b7aa", width = 0.7) +
    ggupset::scale_x_upset(order_by = "freq", n_intersections = 30) +
    scale_y_continuous(expand = c(0,0)) +
    labs(x = "", y = "Shared transcripts", title = "Distribution of ciliate transcripts") +
    theme_classic() +
  theme(plot.margin = margin(2, 0, 0, 2, "cm"),
        axis.text = element_text(color = "black", face = "bold", size = 13),
        axis.title = element_text(color = "black", face = "bold", size = 13)) +
  theme_combmatrix(combmatrix.label.text = element_text(color = "black", face = "bold", size = 13),
                     combmatrix.label.extra_spacing = 3)
```

### 3b. Carbon fixation

First isolate specific C-fixation pathways we want to focus on.

-   Glycolysis-Gluconeogenesis
-   TCA cycle
-   Glyoxylate

```{r}
head(euk_long_frenemies_annot)

c_fix_selected <- c("Glycolysis / Gluconeogenesis", "Citrate cycle (TCA cycle)", "Glyoxylate and dicarboxylate metabolism")

df_c_fix <- euk_long_frenemies_annot %>% 
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
      mutate(Class = case_when(
        is.na(Class) ~ "Undetermined ciliophora",
        Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
        TRUE ~ Class
      )) %>%
  separate_longer_delim(KEGG, delim = ",") %>%
  mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  left_join(kegg_key) %>% 
  mutate(GENE_ID = case_when(
    is.na(Gene_identification) & is.na(PFAMs) ~ "No gene ID",
    is.na(Gene_identification) & !(is.na(PFAMs)) ~ "No gene ID",
    !(is.na(Gene_identification)) ~ Gene_identification
  )) %>% 
  filter(KeggOrthology_C %in% c_fix_selected) %>% 
  select(VENT_BIN, VENT_FIELD, LOCATION, KEGG, PFAMs, Class, Gene_identification, KeggOrthology_C, scaledTPM) %>% 
  distinct() %>% 
  # Calculate the MEAN within each class for vent
  group_by()

head(df_c_fix)
```

```{r, fig.height=25, fig.width=10}
df_c_fix %>% 
  filter(KeggOrthology_C == "Glycolysis / Gluconeogenesis") %>% 
  ggplot(aes(x = Gene_identification, y = LOCATION, fill = scaledTPM)) +
  geom_tile() +
  # geom_bar(stat = "identity", position = "dodge") +
  facet_grid(rows = vars(VENT_BIN, VENT_FIELD), cols = vars(KeggOrthology_C), space = "free", scales = "free") +
    labs(x = "", y = "") +
    scale_fill_steps2(
  low = "#2166ac", mid = "white", high = "#b2182b", midpoint = 0, space = "Lab", na.value = "#4d4d4d",
  # low = "#0e6180", mid = "#e8f9fa", high = "#ad268e", midpoint = 0, space = "Lab", na.value = "#4d4d4d",
  guide = "coloursteps",
  aesthetics = "fill") +
  theme_classic() +
  theme(axis.text.y = element_text(color = "black", face = "bold", size = 10),
        strip.text.x = element_text(color = "black", face = "bold", size = 10),
        strip.text.y = element_text(color = "black", face = "bold", size = 8),
        strip.background = element_blank(),
        axis.text.x = element_text(color = "black", face = "bold", size = 10, angle = 90, hjust = 1, vjust = 0.5),
        axis.title = element_text(color = "black", face = "bold", size = 10))
```

```{r}
head(df_c_fix)

df_c_fix %>% 
  group_by(Class, KeggOrthology_C, Gene_identification, VENT_BIN, VENT_FIELD, LOCATION) %>% 
    summarise(MEAN_SITE_TPM = mean(scaledTPM)) %>% # Average across signals at each site
  ungroup() %>% 
  group_by(Class, KeggOrthology_C, Gene_identification, VENT_BIN, VENT_FIELD) %>% 
    summarise(SUM_C_TPM = sum(MEAN_SITE_TPM)) %>% # Sum signal for site and class
  ggplot(aes(x = KeggOrthology_C, y = VENT_BIN, fill = SUM_C_TPM)) +
  geom_tile(stat = "identity") +
  facet_grid(rows = vars(Class), scales = "free", space = "free")
```

```{r}
class_order <- c("Colpodea", "Oligohymenophorea", "Nassophorea","Phyllopharyngea", "Plagiopylea", "Prostomatea", #conthreep
                 "Spirotrichea", "Armophorea", "Litostomatea","Muranotrichea", "Parablepharismea", #intramacronuleata or SAL (Rotterova et al. 2020)
                     "Heterotrichea", "Undetermined ciliophora")
class_color_order <- c("#450be3", "#b29af5", "#078ff7","#b0d7f5", "#099c70", "#8ce6cb",
                 "#ed4132", "#ed9087", "#e39a1b","#e0c18b", "#e0e329",
                 "#b02095", "#40373e")
```

```{r}
# Run this once. Remove dataframes if needed
rm(compiled_df_wclass); rm(df_out)

for (i in class_order){
    # Subset and wrangle
    toclass_df <- euk_long_frenemies_annot %>% 
      # filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
      # mutate(Class = case_when(
      #   is.na(Class) ~ "Undetermined ciliophora",
      #   Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
      #   TRUE ~ Class
      # )) %>% 
      filter(Class == i) %>% 
      unite(SAMPLE_KEY, SEQ_ID, VENT_FIELD, full_classification, sep = ";;") %>% 
      select(SAMPLE_KEY, scaledTPM, VENT_BIN) %>% 
      pivot_wider(names_from = VENT_BIN, values_from = scaledTPM, values_fn = sum, values_fill = NA) %>% 
      drop_na() %>% 
      pivot_longer(cols = `Non-vent`:`Vent`, names_to = "VENT_BIN", values_to = "scaledTPM") %>% 
      separate(SAMPLE_KEY, c("SEQ_ID", "VENT_FIELD", "full_classification"), sep = ";;") %>% 
      unite(SAMPLE_KEY, VENT_BIN, VENT_FIELD, full_classification, sep = ";;") %>% 
      pivot_wider(names_from = SAMPLE_KEY, values_from = scaledTPM) %>%
      column_to_rownames(var = "SEQ_ID") %>% 
      as.matrix
      #
      # Normalize
      ciliate_class_clr_enrich <- decostand(toclass_df, na.rm = TRUE, method = "total")
      #
      # Make df_out
      df_out <- data.frame(ciliate_class_clr_enrich) %>% 
        rownames_to_column(var = "SEQ_ID") %>% 
        pivot_longer(cols = -c(SEQ_ID), names_to = "SAMPLE_NAME", values_to = "VALUE") %>% 
        add_column(CLASS = i)
      print(paste("Done with", i))
      #
      if (!(exists("compiled_df_wclass"))){
        compiled_df_wclass <- df_out
        } else{
          compiled_df_wclass <- rbind(compiled_df_wclass, df_out)
        }
      }

# unique(compiled_df_wclass$CLASS)

```

### Observations at the ciliate level.

# Ordination analysis with ciliate transcripts

Previously, the metaT data has always been weighed down by outliers. (1) Try all vent sites to show outliers as a Supplementary figure. (2) Try only ciliates in all samples (3) Ciliates in vent samples only (4) Sort by ciliate classes - and summarize there. Are there certain classes that group together at all? why or why not?

Loading objects: matrix_frenemies_ciliates matrix_frenemies_ciliates_ventonly key_taxa

## PCA analysis by classes

Use matrices made previously

```{r}
head(matrix_frenemies_ciliates_ventonly)
head(key_taxa)
```

Apply CLR normalization

```{r}
# ?decostand()
clr_ciliate <- decostand(matrix_frenemies_ciliates_ventonly, MARGIN = 2, method = "rclr")
pca_clr <- prcomp(data.frame(t(clr_ciliate)))
variance_lr <- (pca_clr$sdev^2)/sum(pca_clr$sdev^2)
## View bar plot
barplot(variance_lr, main = "Log-Ratio PCA Screeplot", xlab = "PC Axis", ylab = "% Variance",
    cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
```

```{r}
pca_ciliatevent_only <- data.frame(pca_clr$x, SAMPLE_INFO = rownames(pca_clr$x)) %>%
  separate(SAMPLE_INFO, into = c("VENT_FIELD", "VENT_BIN", "LOCATION"), sep = "_") %>%
  select(VENT_FIELD, VENT_BIN, LOCATION, PC1, PC2)
```

```{r}
## Extract PCR points
pca_plot_ciliate <- pca_ciliatevent_only %>%
  ## Generate PCA plot
  ggplot(aes(x = PC1, y = PC2, shape = VENT_FIELD, fill = VENT_FIELD)) +
    geom_hline(yintercept = 0) + geom_vline(xintercept = 0, color = "#525252") +
    geom_point(size=3, stroke = 1, color = "#252525") +
    ylab(paste0('PC2 ',round(variance_lr[2]*100,2),'%')) +
    xlab(paste0('PC1 ',round(variance_lr[1]*100,2),'%')) +
    scale_shape_manual(values = c(21, 23, 24)) +
    scale_fill_manual(values = c("#EAAC8B", "#B56576", "#355070")) +
  # scale_x_continuous(limits = c(-1, 1)) +
  # scale_y_continuous(limits = c(-1, 1)) +
    theme_bw() +
    theme(axis.text = element_text(color="black", size=12),
          legend.title = element_blank(),
          axis.title = element_text(color="black", size=14),
          legend.text = element_text(color = "black", size = 14),
          plot.margin = margin(2, 1, 2, 1, "cm")) +
    guides(fill = guide_legend(override.aes = list(shape = 21) ),
              shape = guide_legend(override.aes = list(color = "black")))
```

```{r, fig.height=4, fig.width=10}
pca_plot_ciliate +
  pca_plot_ciliate + scale_x_continuous(limits = c(-7, 2)) +
  scale_y_continuous(limits = c(-15, 2)) +
  patchwork::plot_layout(nrow = 1)
# ggsave("figures/PCAplot_vent_ciliate_inset.pdf", width = 10, height = 4, device = "pdf", limitsize = FALSE)
```

## Repeat PCA with class information

```{r}
head(euk_long_frenemies_annot)
```

Write function to look at specific ciliate classes.

```{r}
ciliate_bysample_PRE <- euk_long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  filter(NUM_ZERO < 21) %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  filter(Class != "Undetermined ciliophora") %>% 
  # filter(Class == "Oligohymenophorea") %>% 
  unite(SAMPLE_NAME, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>% 
  unite(GENE_INFORMATION, KEGG, PFAMs, GOs) %>% 
  select(SUPERGROUP_18S, SAMPLE_NAME, full_classification, Class, GENE_INFORMATION, SequenceID, scaledTPM) %>% distinct() %>% 
  unite(SAMPLE_NAME_wclass, SAMPLE_NAME, Class, full_classification, sep = "--", remove = FALSE)
head(ciliate_bysample_PRE)
unique(ciliate_bysample_PRE$Class)
```

```{r}
pca_ciliate_class <- function(class) {
  output_matrix <- ciliate_bysample_PRE %>% 
    filter(Class == class) %>% 
    group_by(SAMPLE_NAME_wclass, GENE_INFORMATION) %>% 
    summarise(MEAN_VAL = mean(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE_NAME_wclass, values_from = MEAN_VAL, values_fill = 0) %>% 
  column_to_rownames(var = "GENE_INFORMATION") %>% 
  as.matrix
  ## normalize
  clr_ciliate_sample <- decostand(output_matrix, MARGIN = 2, method = "rclr")
  pca_clr_sample <- prcomp(data.frame(t(clr_ciliate_sample)))
  variance_lr <- (pca_clr$sdev^2)/sum(pca_clr$sdev^2)
  ## View bar plot
  barplot(variance_lr, main = "Log-Ratio PCA Screeplot", xlab = "PC Axis", ylab = "% Variance",
    cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
  # Extract & plot
  data.frame(pca_clr_sample$x, SAMPLE_INFO = rownames(pca_clr_sample$x)) %>%
    separate(SAMPLE_INFO, into = c("SAMPLE_NAME", "Class", "full_classification"), sep = "--") %>%
    separate(SAMPLE_NAME, into = c("VENT_FIELD", "VENT_BIN", "LOCATION"), sep = "_") %>%
    select(Class, full_classification, VENT_FIELD, VENT_BIN, LOCATION, PC1, PC2) %>% 
  ## Generate PCA plot
  ggplot(aes(x = PC1, y = PC2, fill = Class, fill = Class, shape = VENT_FIELD)) +
    geom_hline(yintercept = 0) + geom_vline(xintercept = 0, color = "#525252") +
    geom_point(size=2, stroke = 1, color = "#252525") +
    ylab(paste0('PC2 ',round(variance_lr[2]*100,2),'%')) +
    xlab(paste0('PC1 ',round(variance_lr[1]*100,2),'%')) +
    scale_shape_manual(values = c(21, 23, 24)) +
    # scale_fill_manual(values = c("#EAAC8B", "#B56576", "#355070")) +
  # scale_x_continuous(limits = c(-1, 1)) +
  # scale_y_continuous(limits = c(-1, 1)) +
    theme_bw() +
    theme(axis.text = element_text(color="black", size=12),
          legend.title = element_blank(),
          axis.title = element_text(color="black", size=14),
          legend.text = element_text(color = "black", size = 14),
          plot.margin = margin(2, 1, 2, 1, "cm")) +
    guides(fill = guide_legend(override.aes = list(shape = 21) ),
              shape = guide_legend(override.aes = list(color = "black")))
}

  
unique(ciliate_bysample_PRE$Class)

```

```{r, fig.width=20, fig.height=20}
pca_ciliate_class("Prostomatea") + pca_ciliate_class("Spirotrichea") + pca_ciliate_class("Colpodea") +
  pca_ciliate_class("Litostomatea") + pca_ciliate_class("Oligohymenophorea") + pca_ciliate_class("Nassophorea") +
  pca_ciliate_class("Parablepharismea") + pca_ciliate_class("Muranotrichea") + pca_ciliate_class("Phyllopharyngea") +
  pca_ciliate_class("Armophorea") + pca_ciliate_class("Heterotrichea") + pca_ciliate_class("Plagiopylea") +
  plot_layout(nrow= 4)
```

Function to run PCA on individual ciliate classes by sample. Do ALL ciliate classes separate by vent field?

# Class level similarities across transcript profile

```{r}
head(euk_long_frenemies_annot)
```

Make a matrix, where species IDs are the column headers

```{r}
head(euk_long_frenemies_annot)
ciliate_taxa_class_level <- euk_long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  filter(NUM_ZERO < 21) %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  select(full_classification, SEQ_ID, KEGG, PFAMs, GOs, SUPERGROUP_18S, Supergroup:Genus_spp, classification, scaledTPM) %>% 
  distinct() %>% #Remove duplicate IDS
  mutate(CLASS = case_when(
    Class == classification ~ Class,
    TRUE ~ paste(Class, classification, sep = ";")
  )) %>% 
  unite(GENE_INFORMATION, KEGG, PFAMs, GOs) %>% 
  group_by(Class, GENE_INFORMATION) %>%
    summarise(mean_tpm_spp = sum(scaledTPM)) %>%
  pivot_wider(names_from = Class, values_from = mean_tpm_spp, values_fill = 0) %>%
  filter(GENE_INFORMATION != "-_-_-") %>% 
  column_to_rownames(var = "GENE_INFORMATION") %>% 
  as.matrix
head(ciliate_taxa_class_level)
```

```{r}
# ?decostand
range(ciliate_taxa_class_level)
taxa_spp_stand <- decostand(ciliate_taxa_class_level, MARGIN = 1, method = "rclr")
range(taxa_spp_stand)

head(taxa_spp_stand)
?cor()
corr_tax_spp <- cor(taxa_spp_stand, method = "spearman")
corrplot(corr_tax_spp, method = "square", type = "upper", tl.cex = 0.8)
```

Distance matrix

```{r}
dist_ciliate_spp <- (dist(ciliate_taxa_spp_level, method = "euclidean", upper = FALSE))

library(corrplot)
out_corr <- cor(dist_ciliate_spp)

```

Compute jaccard distances across all samples.

```{r}
?vegdist()
dendro_jacc_tax <- vegan::vegdist(t(ciliate_taxa_spp_level), method = "euclidean")
?dist()
?cor()
head(dendro_jacc_tax)
cluster_jacc_tax <- hclust(dist(t(taxa_spp_stand)), method = "mcquitty")
plot(cluster_jacc_tax)
# ?compositions::dist()
# ?hclust

library(ggdendro)
dendro_plot_tax <- ggdendro::dendro_data(as.dendrogram(cluster_jacc_tax), type = "triangle")
label_dendro_order_tax <- as.character(dendro_plot_tax$labels$label)
?dendro_data
```

### Plot dendrogram by taxonomy

```{r, fig.height=10, fig.width=8}
range(segment(dendro_plot_tax)$y)
(dendro_plot_tax$labels)
class(dendro_plot_tax)
dendro_ggplot <- ggplot(data = segment(dendro_plot_tax)) +
  geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
  coord_flip(clip = "off") +
  scale_y_reverse() +
  geom_text(aes(x = x, y = y,
                label = label,
                angle = 0, hjust = 0, color = ),
            data = label(dendro_plot_tax)) +
  theme_dendro() +
  labs(y = "Dissimilarity", title = "Jaccard distance") +
  theme(axis.text.x = element_text(color = "black", size = 14),
        axis.line.x = element_line(color = "#252525"),
        axis.ticks.x = element_line(),
        axis.title.x = element_text(color = "black", size = 14),
        plot.margin = unit(c(1,16,1,1), "lines"))
dendro_ggplot
# margin(t, r, l, b)
```

```{r}
# label_dendro_order_tax <- as.character(dendro_plot_tax$labels$label)
# label_dendro_order_tax
```

# RDA analysis

RDA reveals relationships among the sites (transcript profiles by site) and the environmental parameters. We can explore the relationship among all transcripts by site, and then model the effect that each environmental parameter has on it.

Taking the ciliate transcript profile (SequenceID) and see what metadata information explains the pattern.

1.  Perform RDA for all ciliate. All samples, and then vent vs. non-vent.

2.  Make a function, repeat for individual classes.

## Subset and align metadata and transcript data

Subset metadata to have quantitative, qualitative, and binary information.

```{r}
head(metadata_metaT)

# Extract average prokaryote and eukaryotic cells/ml
tmp <- metadata_metaT %>%
  filter(SAMPLETYPE == "insitu") %>%
  filter(VENT_BIN == "Vent" & VARIABLES == "EukConc") %>% drop_na()
euk_mean <- mean(tmp$VALUE)

tmp <- metadata_metaT %>%
  filter(SAMPLETYPE == "insitu") %>%
  filter(VENT_BIN == "Vent" & VARIABLES == "ProkConc") %>% drop_na()
prok_mean <- mean(tmp$VALUE)

metadata_ciliates <- metadata_metaT %>%
  filter(LOCATION != "SirVentsAlot") %>% 
  filter(SAMPLETYPE == "insitu") %>%
  filter(VENT_BIN == "Vent") %>%
  select(-ends_with("ORDER")) %>%
  pivot_wider(names_from = VARIABLES, values_from = VALUE, values_fill = NA, values_fn = mean) %>%
  mutate(EUK_CONC = case_when(
    is.na(EukConc) ~ euk_mean,
    TRUE ~ EukConc
  ),
  PROK_CONC = case_when(
    is.na(ProkConc) ~ prok_mean,
  TRUE ~ ProkConc)) %>%
  select(-ProkConc, -EukConc, -GrazingEffect_hr, -H2, -H2S,
         -SAMPLETYPE)
###
colnames(metadata_ciliates)
num_metadata <- metadata_ciliates %>%
  select(CH4, DEPTH, Mg, TEMP, pH, EUK_CONC, PROK_CONC) %>%
  column_to_rownames(var = "SAMPLE_NAME") %>%
  mutate_if(is.character, as.numeric) %>%
  as.matrix

standarize_metadata_ciliates <- decostand(num_metadata, MARGIN = 2, method = "standardize")

metadata_ciliates_norm <- metadata_ciliates %>%
  select(SAMPLE_NAME, VENT_FIELD) %>%
  left_join(as.data.frame(standarize_metadata_ciliates) %>% rownames_to_column(var = "SAMPLE_NAME")) %>%
  column_to_rownames(var = "SAMPLE_NAME")
# unique(metadata_ciliates_norm$VENT_FIELD)
```

For normalization, we currently have data in scaled TPM. And because we want the same number of samples in metadata and transcript TPM table, lets subsample from the metadata table.

SirVentsalot was removed due to missing geochemistry

```{r}
head(metadata_ciliates_norm)
sample_name <- as.character(unique(rownames(metadata_ciliates_norm)))
colnames(matrix_frenemies_ciliates_ventonly)
sample_name
# head(wide_df_ciliate) # The column names for samples match "SAMPLE_NAME" in metadata_metaT
transcripts_ciliates <- as.data.frame(matrix_frenemies_ciliates_ventonly) %>%
  rownames_to_column(var = "SequenceID") %>% 
  select(SequenceID, all_of(sample_name)) %>%
  distinct() %>%
  column_to_rownames(var = "SequenceID") %>%
  mutate_if(is.character, as.numeric) %>%
  as.matrix
head(transcripts_ciliates)
clr_transcripts_ciliates <- decostand(t(transcripts_ciliates), method = "rclr")

```

```{r}
# glimpse(clr_transcripts_ciliates)
# glimpse(metadata_ciliates_norm)
rownames(clr_transcripts_ciliates) # should be the same!
rownames(metadata_ciliates_norm)
rda_ciliates <- rda(clr_transcripts_ciliates ~ ., data = metadata_ciliates_norm, na.action = na.exclude)
rda_ciliates
# summary(rda_ciliates)
```

```{r}
plot(rda_ciliates, scaling = 1)
summary(rda_ciliates)
```

78% of the variance of the transcript profiles for vent associated ciliates explained by the environmental variables, 21% is not.

-   Eigenvalues = contribution of RDAs to the variable

```{r}
adj_rda_ciliateoutput <- RsquareAdj(rda_ciliates)$adj.r.squared
adj_rda_ciliateoutput
anova.cca(rda_ciliates, step = 1000, by = "term")
```

With all terms, environmental variables explain 78% of the variables for ciliate transcript profiles at vents. But when we look at each individual term, none are significant on their own. And our R squared (adjusted) is not significant.

Extract RDA information

```{r}
# Extract the important of each of the components
perc <- round(100*(summary(rda_ciliates)$cont$importance[2,1:2]), 2)
perc # for RDA1 and RDA2

SAMPLES <- data.frame(scores(rda_ciliates, display = "sites", choices = c(1,2), scaling = 1)) %>% 
  rownames_to_column(var = "SAMPLE_NAME") %>% 
  separate(SAMPLE_NAME, into = c("VENT_FIELD", "VENT_BIN", "LOCATION"), sep = "_", remove = FALSE)
head(SAMPLES)
# scores(rda_ciliates, display = "species", choices = c(1,2), scaling = 1)
all_biplot_pts <- data.frame(scores(rda_ciliates, display = "bp", choices = c(1,2), scaling = 1)) %>% # arrows start at 0,0 and end at this variable
  rownames_to_column(var = "VARIABLE") %>% 
  col

BIPLOT
```

```{r}
# scale_fill_manual(values = c("#EAAC8B", "#B56576", "#355070")) +

SAMPLES %>% 
  ggplot() +
  geom_point(stat = "identity", shape = 21, color = "black", aes(x = RDA1, y = RDA2, fill = VENT_FIELD)) +
    geom_segment(data = BIPLOT, aes(color = VARIABLE, x = 0, y = 0, xend = RDA1, yend = RDA2))
# ?geom_segment
```

### Repeat with biotic vs abiotic

Create abiotic and biotic only parameters too.

```{r}
# Without vent site.
head(metadata_ciliates_norm)
biotic <- metadata_ciliates_norm %>% 
  select(VENT_FIELD, EUK_CONC, PROK_CONC)
abiotic <- metadata_ciliates_norm %>% 
  select(VENT_FIELD, CH4, DEPTH, Mg, TEMP, pH)
```

```{r}
# glimpse(clr_transcripts_ciliates)
# glimpse(metadata_ciliates_norm)
rownames(clr_transcripts_ciliates) # should be the same!
rownames(biotic)
rownames(abiotic)
s
rda_biotic <- rda(clr_transcripts_ciliates ~ ., data = biotic, na.action = na.exclude)
rda_biotic

rda_abiotic <- rda(clr_transcripts_ciliates ~ ., data = abiotic, na.action = na.exclude)
rda_abiotic
# summary(rda_ciliates)
```

```{r}
plot(rda_biotic, scaling = 1)
plot(rda_abiotic, scaling = 1)
summary(rda_biotic)
summary(rda_abiotic)
```

78% of the variance of the transcript profiles for vent associated ciliates explained by the environmental variables, 21% is not.

-   Eigenvalues = contribution of RDAs to the variable

```{r}
adj_rda_abioticeoutput <- RsquareAdj(rda_abiotic)$adj.r.squared
adj_rda_abioticeoutput
anova.cca(rda_abiotic, step = 1000, by = "term")

adj_rda_bioticeoutput <- RsquareAdj(rda_biotic)$adj.r.squared
adj_rda_bioticeoutput
anova.cca(rda_biotic, step = 1000, by = "term")
```

## Function to explore classes

RDA analysis helps us take species observations from Y and determine how much of Y is constrained by values in X.

```{r}
# tmp <- wide_df_ciliate %>% 
#     separate(full_classification, c("Domain", "Supergroup", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = "; ", remove = FALSE) 
```

Function to make estimate RDA analysis and create plot by subsetting ciliate classes.

```{r}
# sample_name <- as.character(unique(rownames(metadata_ciliates_norm)))
# rda_fxn <- function(CLASS){
#   transcripts_in <- wide_df_ciliate %>% 
#     separate(full_classification, c("Domain", "Supergroup", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = "; ", remove = FALSE) %>% 
#     filter(Class == CLASS) %>% 
#     select(SequenceID, all_of(sample_name)) %>%
#     distinct() %>% 
#     column_to_rownames(var = "SequenceID") %>%
#     mutate_if(is.character, as.numeric) %>%
#     as.matrix
#   ##
#   clr_transcripts <- decostand(t(transcripts_in), method = "rclr")
#   ##
#   rda_output <- rda(clr_transcripts ~ ., data = metadata_ciliates_norm)
#   constrained <- round(100*(1-(rda_output$CA$tot.chi)/rda_output$tot.chi), 2)
#   info <- paste("Parameters (X) tested explained ", constrained, "% of the Y results.", sep = "")
#   print(info)
#   return(rda_output)
# }
# 
# plot_rda <- function(rda_in){
#   summary <- summary(rda_in)
#   SAMPLES = data.frame(summary$sites[,1:2]) %>% 
#     rownames_to_column(var = "SAMPLE_NAME") %>% 
#     separate(SAMPLE_NAME, c("Field", "Vent_BIN", "Vent"), sep = "_", remove = FALSE) %>%
#     select(SAMPLE_NAME, Field, Vent, x_sample = RDA1, y_sample = RDA2)
#   # TRANSCRIPTS = data.frame(summary$species[,1:2])
#   BIPLOT_end = data.frame(summary$biplot[,1:2]) %>% 
#     rownames_to_column(var = "Parameter") %>% 
#     select(Parameter, x_end = RDA1, y_end = RDA2)
#   #
#   isolated_rda_axis <- round(100*(summary$cont$importance[2, 1:2]), 2)
#   #
#   output_plot <- ggplot() +
#   geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") + 
#   geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
#   geom_segment(data = BIPLOT_end, aes(x = 0, xend = x_end, y = 0, yend = y_end),
#                arrow = arrow(ends = "last", type = "open", length = unit(0.1, "cm"))) +
#     geom_label(data = BIPLOT_end, size = 2, 
#                aes(x = (x_end*2), y = (y_end*2), label = Parameter)) +
#   geom_point(data = SAMPLES, shape = 21, size = 3,
#              aes(x = x_sample, y = y_sample, fill = Field)) +
#   scale_fill_manual(values = c("#B56576", "#355070")) +
#   theme_classic() +
#   theme(axis.text = element_text(size = 14)) +
#   labs(x = paste("RDA1 ", isolated_rda_axis[1], "%", sep = ""), y = paste("RDA2", isolated_rda_axis[2], "%", sep = ""))
#   output_plot
#   return(output_plot)
# }
# 
# unique(tmp$Class)
```

```{r}
# Spirotrichea <- rda_fxn("Spirotrichea")
# # plot_rda(Spirotrichea)
# Heterotrichea <- rda_fxn("Heterotrichea")
# Prostomatea <- rda_fxn("Prostomatea")
# # SG_Alveolata_Indeterminate <- rda_fxn("SG_Alveolata_Indeterminate")
# Nassophorea <- rda_fxn("Nassophorea")
# Phyllopharyngea <- rda_fxn("Phyllopharyngea")
# Parablepharismea <- rda_fxn("Parablepharismea")
# Litostomatea <- rda_fxn("Litostomatea")
# Muranotrichea <- rda_fxn("Muranotrichea")
# Armophorea <- rda_fxn("Armophorea")
# Oligohymenophorea <- rda_fxn("Oligohymenophorea")
# Colpodea <- rda_fxn("Colpodea")
# Plagiopylea <- rda_fxn("Plagiopylea")


# RsquareAdj(Spirotrichea)
# anova.cca(Spirotrichea, sep = 10000, by = "term")
```

> When all parameters were fed into our model, all ciliate classes were found to have an average of \>90% explained by the environmental parameters.

# Gene expression overview

## Import and include KEGG IDs

Previously curated and parsed KEGG ID table. Note that KEGG IDs are often duplicated as the orthology information is repeated and individual KEGGs belong to different kinds of

```{r}
kegg <- read.csv("../KEGG_DB/combined_kegg.csv") %>% 
  select(KEGG = KO_number, everything(), -X)

curated_kegg <- read.csv("../KEGG_DB/kegg_curation_SKHU_Oct2024.csv", na.strings = "NA")

# Join to include all KEGG IDs and curated list.
kegg_key <- kegg %>% 
  distinct() %>% 
  left_join(curated_kegg, multiple = "all", by = join_by(KEGG))
```

```{r}
head(euk_long_frenemies_annot)
```

```{r}
ciliate_annot_all <- euk_long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  separate_longer_delim(KEGG, delim = ",") %>%
  mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  left_join(kegg_key) %>% 
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  select(SequenceID, SAMPLE_NAME, scaledTPM, Class, Phylum:Genus_spp, KEGG, PFAMs, GOs, A:D, starts_with("KeggOrthology"), Gene_identification, starts_with("CLASSIFICATION")) %>% distinct()
```

Get stats on what KEGG IDs were assigned gene information.

```{r}
# total<- length(unique(curated_long_df$SequenceID))
# y <- length(unique((curated_long_df %>% filter(!is.na(CLASSIFICATION_BROAD)))$SequenceID))
# x <- length(unique((curated_long_df %>% filter(!is.na(A)))$SequenceID))
# b <- length(unique((curated_long_df %>% filter(!(KEGG == "-")))$SequenceID))
# y/total # 13% have KEGG IDs of interest
# x/total # 23% have KEGG ID at the A level
# b/total # 76% don't have a KEGG ID at all. 
```

Presence / absence

```{r, fig.width=16, fig.height=9}
# head(ciliate_annot_all)
# range(ciliate_annot_all$scaledTPM)
ciliate_annot_all %>% 
  select(SAMPLE_NAME, Gene_identification, Class, scaledTPM, A:C, CLASSIFICATION_SPECIFIC) %>% distinct() %>% 
  group_by(A, B, C, CLASSIFICATION_SPECIFIC, Class) %>% 
    summarise(SUM = sum(scaledTPM)) %>% 
    add_column(VAL = 1) %>% 
    mutate(CLASS_ORDER = factor(Class, levels = rev(class_order))) %>% 
  filter(!is.na(C)) %>% 
  ggplot(aes(x = C, y = CLASS_ORDER, fill = VAL)) +
    geom_tile(color = "black", linewidth = 0.5) +
  theme_classic() +
    facet_grid(cols = vars(B, A), space = "free", scale = "free") +
  labs(x = "", y = "") +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_text(color = "black", face = "bold", angle = 0, hjust = 1, vjust = 0.5),
        axis.text.x = element_text(color = "black", face = "bold", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "none", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0)) 
  
```

Check gene lists

```{r}
# View(ciliate_annot_all %>% filter(B == "Carbohydrate and lipid metabolism"))
# length(unique((ciliate_annot_all %>% filter(B == "Carbohydrate and lipid metabolism"))$Gene_identification))
```

```{r, fig.width=14, fig.height=10}
ciliate_annot_all %>% 
  select(SAMPLE_NAME, Gene_identification, Class, scaledTPM, A:C, CLASSIFICATION_SPECIFIC) %>% distinct() %>% 
  filter(B == "Carbohydrate and lipid metabolism") %>% 
  group_by(B, Gene_identification, Class) %>% 
    summarise(mean_category = mean(scaledTPM)) %>% 
    mutate(CLASS_ORDER = factor(Class, levels = rev(class_order))) %>% 
  # filter(!is.na(C)) %>% 
  ggplot(aes(x = CLASS_ORDER, y = Gene_identification, fill = mean_category)) +
    geom_tile(color = "black", linewidth = 0.5) +
  theme_classic() +
    # facet_grid(cols = vars(B, A), space = "free", scale = "free") +
  labs(x = "", y = "") +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_text(color = "black", angle = 0, hjust = 1, vjust = 0.5),
        axis.text.x = element_text(color = "black", angle = 90, hjust = 1, vjust = 0.5),
        legend.position = "right", legend.title = element_blank(),
        margin(t=0, r=0, b=0,l=0)) 
```

## Highest TPM transcripts

1.  What are highest TPM for each class at vents? vs. background?
2.  What are the highest TPM for vents? vs. background?

Highest TPM transcripts for whole dataset - compare vent. vs background.

```{r}
head(euk_long_frenemies_annot)
```

```{r}
dim(euk_long_frenemies_annot)
annot_all_euk <- euk_long_frenemies_annot %>%
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  select(SAMPLE_NAME, SequenceID, VENT_BIN, KEGG, PFAMs, GOs, Class, SUPERGROUP_18S, Phylum:Genus_spp, scaledTPM) %>% distinct() %>% 
  ungroup() %>% 
  group_by(VENT_BIN) %>% 
    slice_max(order_by = scaledTPM, prop = 0.05) 
  # separate_longer_delim(KEGG, delim = ",") %>%
  # mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  # left_join(kegg_key) %>% 
  # select(SequenceID, SAMPLE_NAME, scaledTPM, Class, Phylum:Genus_spp, KEGG, PFAMs, GOs, A:D, starts_with("KeggOrthology"), Gene_identification, starts_with("CLASSIFICATION")) %>% distinct()
dim(annot_all_euk)
colnames(annot_all_euk)
# View(annot_all_euk)
```

How many of the above top 5% were also not annotated?

```{r}
# table((annot_all_euk %>% 
#   mutate(ANNOT = case_when(
#     (KEGG == "-" & PFAMs == "-" & GOs == "-") ~ "not annotated",
#     TRUE ~ "annotated"
#   )) %>% 
#   select(VENT_BIN, ANNOT))$ANNOT)
# 1305 / (1305 + 22768) #5% not annotated.
```

Repeat without the unannoated ones

```{r}
annot_all_euk_top5 <- euk_long_frenemies_annot %>%
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  filter(!(KEGG == "-" & PFAMs == "-" & GOs == "-")) %>% 
  select(SAMPLE_NAME, SequenceID, VENT_BIN, KEGG, PFAMs, GOs, Class, SUPERGROUP_18S, Phylum:Genus_spp, scaledTPM) %>% distinct() %>% 
  ungroup() %>% 
  group_by(VENT_BIN) %>% 
    slice_max(order_by = scaledTPM, prop = 0.05) 
# dim(annot_all_euk_top5)
# head(annot_all_euk_top5)
table(annot_all_euk_top5$SUPERGROUP_18S)
```

```{r}

annot_all_euk_top5 %>% 
  mutate(TAX_ORDER = factor(SUPERGROUP_18S, levels = rev(all_taxa_metat_order))) %>% 
  group_by(VENT_BIN, TAX_ORDER) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = SUM_TPM, y = COUNT_TRANSCRIPTS, fill = TAX_ORDER, shape = VENT_BIN)) +
    geom_point(stat = "identity", color = "black", size = 3) +
  # scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  scale_shape_manual(values = c(21, 23)) +
  scale_y_log10() + scale_x_log10() +
  theme_classic() +
  labs(y = "Total transcripts", x = "TPM sum") +
  theme(legend.position = "right", legend.title = element_blank())
```

```{r, fig.width=10, fig.height=4}
(annot_all_euk_top5 %>% 
  mutate(TAX_ORDER = factor(SUPERGROUP_18S, levels = rev(all_taxa_metat_order))) %>% 
  group_by(VENT_BIN, TAX_ORDER) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = TAX_ORDER, y = COUNT_TRANSCRIPTS, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "Total transcripts", x = "") +
  theme(legend.position = "none", legend.title = element_blank())) + 
  ##
  (annot_all_euk_top5 %>% 
  mutate(TAX_ORDER = factor(SUPERGROUP_18S, levels = rev(all_taxa_metat_order))) %>% 
  group_by(VENT_BIN, TAX_ORDER) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = TAX_ORDER, y = SUM_TPM, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "TPM sum", x = "") +
  theme(legend.position = "right", legend.title = element_blank())) +
  patchwork::plot_layout(nrow = 1) + plot_annotation(title = "Top 5% transcript identity", tag_levels = 'a')
```

```{r}
kegg_orthoB_seleciton <- c("Amino acid metabolism", "Biosynthesis of other secondary metabolites", "Carbohydrate metabolism", "Cell growth and death", "Cell motility", "Energy metabolism", "Folding, sorting and degradation", "Lipid metabolism", "Membrane transport", "Nucleotide metabolism", "Signal transduction", "Transcription", "Translation", "Transport and catabolism")

annot_all_euk_top5_annot <- euk_long_frenemies_annot %>%
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  filter(!(KEGG == "-" & PFAMs == "-" & GOs == "-")) %>% 
  select(SAMPLE_NAME, SequenceID, VENT_BIN, KEGG, PFAMs, GOs, Class, SUPERGROUP_18S, Phylum:Genus_spp, scaledTPM) %>% distinct() %>% 
  ungroup() %>% 
  group_by(VENT_BIN) %>% 
    slice_max(order_by = scaledTPM, prop = 0.05) %>% 
  separate_longer_delim(KEGG, delim = ",") %>%
  mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  left_join(kegg_key) %>% 
  select(SequenceID, SAMPLE_NAME, scaledTPM, Class, Phylum:Genus_spp, KEGG, PFAMs, GOs, A:D, starts_with("KeggOrthology"), Gene_identification, starts_with("CLASSIFICATION")) %>% 
  filter(KeggOrthology_B %in% kegg_orthoB_seleciton) %>% 
  distinct()
# head(annot_all_euk_top5_annot)
table(annot_all_euk_top5_annot$KeggOrthology_B)
```

```{r, fig.width=10, fig.height=4}
(annot_all_euk_top5_annot %>% 
  group_by(VENT_BIN, KeggOrthology_B) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_B, y = COUNT_TRANSCRIPTS, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "Total transcripts", x = "") +
  theme(legend.position = "none", legend.title = element_blank())) + 
  ##
  (annot_all_euk_top5_annot %>% 
  group_by(VENT_BIN, KeggOrthology_B) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_B, y = SUM_TPM, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "TPM sum", x = "") +
  theme(legend.position = "right", legend.title = element_blank())) +
  patchwork::plot_layout(nrow = 1) + plot_annotation(title = "Top 5% transcript identity", tag_levels = 'a')
```

Some interesting findings here...

Overall, it looks like when we look at TOTAL number of transcripts, for each Kegg category more are from the non-vent samples. Maybe this is showing that there are many more different types of transcripts. Less specialized metabolic activity.

Let's pare this down and look at some key kegg categories:

```{r}
kegg_orthoB_seleciton <- c("Amino acid metabolism", "Biosynthesis of other secondary metabolites", "Carbohydrate metabolism", "Cell growth and death", "Cell motility", "Energy metabolism", "Folding, sorting and degradation", "Lipid metabolism", "Membrane transport", "Nucleotide metabolism", "Signal transduction", "Transcription", "Translation", "Transport and catabolism")

annot_ciliate_euk_top5_annot <- euk_long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  filter(!(KEGG == "-" & PFAMs == "-" & GOs == "-")) %>% 
  select(SAMPLE_NAME, SequenceID, VENT_BIN, KEGG, PFAMs, GOs, Class, SUPERGROUP_18S, Phylum:Genus_spp, scaledTPM) %>% distinct() %>% 
  ungroup() %>% 
  group_by(VENT_BIN) %>% 
    slice_max(order_by = scaledTPM, prop = 0.05) %>% 
  separate_longer_delim(KEGG, delim = ",") %>%
  mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  left_join(kegg_key) %>% 
  select(SequenceID, SAMPLE_NAME, scaledTPM, Class, Phylum:Genus_spp, KEGG, PFAMs, GOs, A:D, starts_with("KeggOrthology"), Gene_identification, starts_with("CLASSIFICATION")) %>% 
  filter(KeggOrthology_B %in% kegg_orthoB_seleciton) %>% 
  distinct()
# head(annot_all_euk_top5_annot)
table(annot_ciliate_euk_top5_annot$KeggOrthology_B)
```

```{r, fig.width=10, fig.height=4}
(annot_ciliate_euk_top5_annot %>% 
  group_by(VENT_BIN, KeggOrthology_B) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_B, y = COUNT_TRANSCRIPTS, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "Total transcripts", x = "") +
  theme(legend.position = "none", legend.title = element_blank())) + 
  ##
  (annot_ciliate_euk_top5_annot %>% 
  group_by(VENT_BIN, KeggOrthology_B) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_B, y = SUM_TPM, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "TPM sum", x = "") +
  theme(legend.position = "right", legend.title = element_blank())) +
  patchwork::plot_layout(nrow = 1) + plot_annotation(title = "Top 5% transcript identity", tag_levels = 'a')
```

BY ciliate classes, TPM sum varied by vent vs. non-vent. Evidence of vent signature.

CLR transformation on transcrip sums by class level for non vent vs. vent.

```{r}
head(annot_ciliate_euk_top5_annot)
```

### CLR TPM trends

```{r}
ciliate_top5_matrix <- annot_ciliate_euk_top5_annot %>% 
  select(VENT_BIN, Class, scaledTPM, SequenceID) %>% 
  distinct() %>% 
  unite(samples, VENT_BIN, Class, sep = "_") %>% 
  pivot_wider(names_from = samples, values_from = scaledTPM, values_fill = NA, values_fn = sum) %>% 
  column_to_rownames(var = "SequenceID") %>% 
  as.matrix

key_kegg_ciliate <- annot_ciliate_euk_top5_annot %>% select(SequenceID, KeggOrthology_B, KeggOrthology_C, Gene_identification) %>% distinct()
```

```{r}
ciliate_clr_top5 <- decostand(t(ciliate_top5_matrix), method = "rclr")
# ?decostand()
# range(ciliate_clr_top5)
df_ciliate_clr_annot <- as.data.frame(t(ciliate_clr_top5)) %>% 
  rownames_to_column(var = "SequenceID") %>% 
  pivot_longer(cols = -c(SequenceID), names_to = "samples", values_to = "CLR") %>% 
  left_join(key_kegg_ciliate) %>% 
  separate(samples, into = c("VENT_BIN", "Class"), sep = "_", remove = FALSE)

```

```{r}
install.packages("ggforce")
library(ggdist); library(ggbeeswarm); library(gghalves); library(ggforce)
```

```{r, fig.height=7, fig.width=10}
# head(df_ciliate_clr_annot)
df_ciliate_clr_annot %>% 
  mutate(CLASS_ORDER = factor(Class, levels = (class_order))) %>% 
  ggplot(aes(y = CLASS_ORDER, x = CLR)) +
  geom_violin(aes(group = VENT_BIN, alpha = VENT_BIN), fill = "grey", position = "dodge") +
  geom_vline(xintercept = 0) +
  geom_jitter(stat = "identity",  height = 0.25, width = 0.25, shape = 19, aes(color = KeggOrthology_B)) +
  facet_grid(rows = vars(CLASS_ORDER), cols = vars(VENT_BIN), scales = "free", space = "free") +
  theme_classic() +
  scale_x_continuous(limits = c(-2.5,2.5)) +
  scale_color_manual(values = c("#fa9fb5", "#c51b8a", "#67000d", "#ef3b2c", "#ffffcc", "#feb24c","#cc4c02", "#c7e9b4", "#238b45", "#c6dbef", "#00441b", "#99d8c9","#1d91c0",  "#9e9ac8", "#54278f", "#bdbdbd", "#252525", "#f0f0f0")) +
  theme(strip.text.y = element_blank(),
        strip.background = element_blank(),
        legend.title = element_blank(),
        # legend.position = "none",
        axis.text = element_text(color = "black", size = 14, face = "bold")) +
  labs(y = "", x = "CLR transformed TPM")
  
```

Translation, Energy metabolism, Carbohydrate metabolism, AA metabolism

```{r}
head(annot_all_euk_top5_annot)
subset_B <- c("Amino acid metabolism", "Carbohydrate metabolism", "Energy metabolism", "Translation")
```

```{r, fig.height=10, fig.width=6}
annot_all_euk_top5_annot %>% 
  filter(KeggOrthology_B %in% subset_B) %>% 
  group_by(VENT_BIN, KeggOrthology_B, KeggOrthology_C, Gene_identification) %>% 
    summarise(MEAN_TPM = mean(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_C, y = MEAN_TPM, fill = VENT_BIN)) +
    geom_jitter(stat = "identity", shape = 19, aes(color = VENT_BIN), size = 1) +
    geom_boxplot(color = "black", alpa = 0.7)+
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  scale_color_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  scale_y_log10() +
  theme_classic() +
  facet_grid(rows = vars(KeggOrthology_B), scale = "free", space = "free") +
  labs(y = "Mean TPM", x = "") +
  theme(legend.position = "none", legend.title = element_blank())
```

## Repeat highest TPM for ciliates

```{r}
ciliate_annot_all <- euk_long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  separate_longer_delim(KEGG, delim = ",") %>%
  mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  left_join(kegg_key) %>% 
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  select(SequenceID, SAMPLE_NAME, scaledTPM, Class, Phylum:Genus_spp, KEGG, PFAMs, GOs, A:D, starts_with("KeggOrthology"), Gene_identification, starts_with("CLASSIFICATION")) %>% distinct()
```

```{r}
annot_ciliate_all_top5 <- euk_long_frenemies_annot %>%
  filter(SUPERGROUP_18S == "Alveolata-Ciliophora") %>% 
  mutate(Class = case_when(
    is.na(Class) ~ "Undetermined ciliophora",
    Class == "SG_Alveolata_Indeterminate" ~ "Undetermined ciliophora",
    TRUE ~ Class
  )) %>% 
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  filter(!(KEGG == "-" & PFAMs == "-" & GOs == "-")) %>% 
  select(SAMPLE_NAME, SequenceID, VENT_BIN, KEGG, PFAMs, GOs, Class, SUPERGROUP_18S, Phylum:Genus_spp, scaledTPM) %>% distinct() %>% 
  ungroup() %>% 
  group_by(VENT_BIN) %>% 
    slice_max(order_by = scaledTPM, prop = 0.05) 
dim(annot_ciliate_all_top5)
head(annot_ciliate_all_top5)
table(annot_ciliate_all_top5$Class)
```

```{r, fig.width=10, fig.height=4}
class_order <- c("Colpodea", "Oligohymenophorea", "Phyllopharyngea", "Nassophorea", "Spirotrichea", "Armophorea", "Muranotrichea", "Parablepharismea", "Litostomatea", "Prostomatea", "Plagiopylea", "Heterotrichea", "Undetermined ciliophora")

(annot_ciliate_all_top5 %>% 
  mutate(TAX_ORDER = factor(Class, levels = rev(class_order))) %>% 
  group_by(VENT_BIN, TAX_ORDER) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = TAX_ORDER, y = COUNT_TRANSCRIPTS, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "Total transcripts", x = "") +
  theme(legend.position = "none", legend.title = element_blank())) + 
  ##
  (annot_ciliate_all_top5 %>% 
  mutate(TAX_ORDER = factor(Class, levels = rev(class_order))) %>% 
  group_by(VENT_BIN, TAX_ORDER) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = TAX_ORDER, y = SUM_TPM, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "TPM sum", x = "") +
  theme(legend.position = "right", legend.title = element_blank())) +
  patchwork::plot_layout(nrow = 1) + plot_annotation(title = "Top 5% transcript identity", tag_levels = 'a')
```

```{r}
kegg_orthoB_seleciton <- c("Amino acid metabolism", "Biosynthesis of other secondary metabolites", "Carbohydrate metabolism", "Cell growth and death", "Cell motility", "Energy metabolism", "Folding, sorting and degradation", "Lipid metabolism", "Membrane transport", "Nucleotide metabolism", "Signal transduction", "Transcription", "Translation", "Transport and catabolism")

annot_all_euk_top5_annot <- euk_long_frenemies_annot %>%
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>%
  filter(!(KEGG == "-" & PFAMs == "-" & GOs == "-")) %>% 
  select(SAMPLE_NAME, SequenceID, VENT_BIN, KEGG, PFAMs, GOs, Class, SUPERGROUP_18S, Phylum:Genus_spp, scaledTPM) %>% distinct() %>% 
  ungroup() %>% 
  group_by(VENT_BIN) %>% 
    slice_max(order_by = scaledTPM, prop = 0.05) %>% 
  separate_longer_delim(KEGG, delim = ",") %>%
  mutate(KEGG = str_remove_all(KEGG, "ko:")) %>% 
  left_join(kegg_key) %>% 
  select(SequenceID, SAMPLE_NAME, scaledTPM, Class, Phylum:Genus_spp, KEGG, PFAMs, GOs, A:D, starts_with("KeggOrthology"), Gene_identification, starts_with("CLASSIFICATION")) %>% 
  filter(KeggOrthology_B %in% kegg_orthoB_seleciton) %>% 
  distinct()
# head(annot_all_euk_top5_annot)
table(annot_all_euk_top5_annot$KeggOrthology_B)
```

```{r, fig.width=10, fig.height=4}
(annot_all_euk_top5_annot %>% 
  group_by(VENT_BIN, KeggOrthology_B) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_B, y = COUNT_TRANSCRIPTS, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "Total transcripts", x = "") +
  theme(legend.position = "none", legend.title = element_blank())) + 
  ##
  (annot_all_euk_top5_annot %>% 
  group_by(VENT_BIN, KeggOrthology_B) %>% 
    summarise(COUNT_TRANSCRIPTS = n(),
              SUM_TPM = sum(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_B, y = SUM_TPM, fill = VENT_BIN)) +
    geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  theme_classic() +
  labs(y = "TPM sum", x = "") +
  theme(legend.position = "right", legend.title = element_blank())) +
  patchwork::plot_layout(nrow = 1) + plot_annotation(title = "Top 5% transcript identity", tag_levels = 'a')
```

Some interesting findings here...

Overall, it looks like when we look at TOTAL number of transcripts, for each Kegg category more are from the non-vent samples. Maybe this is showing that there are many more different types of transcripts. Less specialized metabolic activity.

Let's pare this down and look at some key kegg categories:

Translation, Energy metabolism, Carbohydrate metabolism, AA metabolism

```{r}
head(annot_all_euk_top5_annot)
subset_B <- c("Amino acid metabolism", "Carbohydrate metabolism", "Energy metabolism", "Translation")
```

```{r, fig.height=10, fig.width=6}
annot_all_euk_top5_annot %>% 
  filter(KeggOrthology_B %in% subset_B) %>% 
  group_by(VENT_BIN, KeggOrthology_B, KeggOrthology_C, Gene_identification) %>% 
    summarise(MEAN_TPM = mean(scaledTPM)) %>% 
  ggplot(aes(x = KeggOrthology_C, y = MEAN_TPM, fill = VENT_BIN)) +
    geom_jitter(stat = "identity", shape = 19, aes(color = VENT_BIN), size = 1) +
    geom_boxplot(color = "black", alpa = 0.7)+
  scale_fill_manual(values = c("#2c7fb8", "#edf8b1")) +
  scale_color_manual(values = c("#2c7fb8", "#edf8b1")) +
  coord_flip() +
  scale_y_log10() +
  theme_classic() +
  facet_grid(rows = vars(KeggOrthology_B), scale = "free", space = "free") +
  labs(y = "Mean TPM", x = "") +
  theme(legend.position = "none", legend.title = element_blank())
```

### Heatmap color schema

```{r}
yl_red <- c("#ffffcc", "#fed976", "#feb24c", "#fc4e2a", "#e31a1c", "#b10026")

reds <- c("#f7f7f7","#fee5d9", "#fcae91", "#fb6a4a", "#a50f15")
```

```{r}
head(ciliate_annot_all)
unique(ciliate_annot_all$CLASSIFICATION_SPECIFIC)

annot_SPECIFIC <- ciliate_annot_all %>% 
  filter(!is.na(CLASSIFICATION_SPECIFIC)) %>% 
  select(SAMPLE_NAME, SequenceID, scaledTPM, Class, CLASSIFICATION_SPECIFIC, Gene_identification, KEGG, PFAMs) %>% distinct() %>% 
  group_by(SAMPLE_NAME) %>% 
    mutate(SAMPLE_TPM_SUM = sum(scaledTPM)) %>% 
  ungroup() %>% 
  group_by(SAMPLE_NAME, Class, CLASSIFICATION_SPECIFIC) %>% 
    summarise(SUM_TPM_CLASS = sum(scaledTPM),
              RELABUN_SAMPLE = SUM_TPM_CLASS/SAMPLE_TPM_SUM) %>% distinct()
annot_SPECIFIC
```

```{r}
# View(annot_SPECIFIC %>% filter(CLASSIFICATION_SPECIFIC == "Inorganic N uptake and assimilation"))
```

```{r, fig.height=20, fig.width=35}
annot_SPECIFIC %>% 
  ggplot(aes(x = SAMPLE_NAME, y = CLASSIFICATION_SPECIFIC, fill = RELABUN_SAMPLE)) +
  geom_tile() +
  facet_grid(cols = vars(Class), rows = vars(CLASSIFICATION_SPECIFIC), space = "free", scale = "free")
```

## Vent vs. non-vent signature

### At Kegg level C

```{r, fig.height=11, fig.width=22}
# classification_byKeggC_ventonly_atClass <- long_df_ciliate %>% 
#   # filter(VENT_BIN == "Vent") %>% 
#   filter(KEGG != "-") %>% 
#   separate(full_classification, c("Domain", "Supergroup", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = "; ", remove = FALSE) %>% 
#   unite(CLASS, Phylum, Class, sep = ";") %>% 
#   select(full_classification, VENT_BIN, CLASS, KEGG, KeggOrthology_A, KeggOrthology_B, KeggOrthology_C, scaledTPM) %>% 
#   distinct() %>% 
#   group_by(CLASS, VENT_BIN, KeggOrthology_A, KeggOrthology_B, KeggOrthology_C) %>% 
#   summarise(SUM_TPM = sum(scaledTPM)) %>% 
#   pivot_wider(names_from = CLASS, values_from = SUM_TPM, values_fill = 0) %>% 
#   unite(category, VENT_BIN, KeggOrthology_A, KeggOrthology_B, KeggOrthology_C, sep = ";") %>% 
#   column_to_rownames(var = "category") %>% 
#   mutate_if(is.character, as.numeric) %>% 
#   filter(rowSums(across(where(is.numeric)))!=0) %>% 
#   as.matrix

# head(classification_by_kegg_ventonly_atClass)
# I want to see calculate rank across Class, which is by column.
# ciliate_keggC_class <- decostand(classification_byKeggC_ventonly_atClass, MARGIN = 1, method = "range")
# 
# data.frame(ciliate_keggC_class) %>%
#   rownames_to_column(var = "category") %>% 
#   separate(category, c("VENT_BIN", "KeggOrthology_A", "KeggOrthology_B", "KeggOrthology_C"), sep = ";") %>% 
#   pivot_longer(cols = starts_with("Ciliophora"), names_to = "full_classification", values_to = "VALUE") %>% 
#   ggplot(aes(x = KeggOrthology_C, y = VENT_BIN, fill = VALUE)) +
#   geom_tile(color = "grey") +
#   facet_grid(rows = vars(full_classification), cols = vars(KeggOrthology_A, KeggOrthology_B), scale = "free", space = "free") +
#   scale_fill_gradientn(colors = yl_red) +
#   theme_classic() +
#   theme(legend.position = "bottom",
#         panel.spacing = unit(0, 'lines'),
#         panel.border = element_rect(color = "black", fill = NA),
#         # axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
#         axis.text.x = element_blank(),
#         strip.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
#         strip.text.y = element_text(angle = 0, hjust = 0, vjust = 0.5),
#         strip.background.x = element_blank(),
#         axis.ticks.x = element_blank()) +
#   labs(x = "KEGG Orthology Level C", y = "")

# ggsave("figures/ranked_keggC_ciliateClasses.svg", width = 22, height = 11, device = "svg", limitsize = FALSE)
```

## Mining specific gene profiles

Does each class of ciliates have all genes for key nutrient and carbon pathways? P/A?

```{r}
# View(long_df_ciliate)
# spec_gene <- long_df_ciliate %>% 
#   filter(VENT_FIELD != "Gorda Ridge") %>% 
#   select(SequenceID, VENT_FIELD, LOCATION, VENT_BIN, KEGG, PFAMs, full_classification, CLASSIFICATION_BROAD, CLASSIFICATION_SPECIFIC, Gene_identification, scaledTPM) %>% 
#   distinct() %>% 
#   mutate(trophic_selection = case_when(
#     grepl("protein kinase", Gene_identification) ~ "Protein kinases",
#     grepl("cathepsin", Gene_identification) ~ "Cathepsin",
#     grepl("transport", Gene_identification) ~ "Transporters",
#     grepl("heat shock", Gene_identification) ~ "Heat shock proteins")) %>% 
#   filter(!is.na(trophic_selection)) %>% 
#   separate(full_classification, c("Domain", "Supergroup", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = "; ", remove = FALSE) %>% 
#   # remove NAs
#   filter(Class != "SG_Alveolata_Indeterminate") %>% 
#   filter(!is.na(Class))
```

By vent site, class

```{r, fig.height=6, fig.width=11}
# zscore_spec_gene <- spec_gene %>% 
#   # Get mean across transcripts from same gene and "species"
#   group_by(SequenceID, VENT_FIELD, VENT_BIN, LOCATION, full_classification, Class, Gene_identification, trophic_selection) %>% 
#   summarise(MEAN_TPM = mean(scaledTPM)) %>% 
#   ungroup() %>% 
#   unite(SAMPLE_INFO, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>%
#   group_by(Class, SAMPLE_INFO, VENT_FIELD, VENT_BIN, LOCATION, trophic_selection) %>% 
#   summarise(SUM = sum(MEAN_TPM),
#             LOG_SUM = log(SUM),
#             ZSCORE = (MEAN_TPM - mean(MEAN_TPM)) / sd(MEAN_TPM),
#             COUNT = n())
# 
# zscore_spec_gene %>% 
#   ggplot(aes(x = trophic_selection, y = LOCATION, fill = ZSCORE)) +
#   geom_tile(color = "black") +
#   facet_grid(rows = vars(VENT_FIELD, VENT_BIN),
#              cols = vars(Class),
#              scales = "free_y", space = "free") +
#   scale_fill_gradientn(colors = yl_red) +
#   theme_classic() +
#   theme(legend.position = "bottom",
#         panel.spacing = unit(0, 'lines'),
#         panel.border = element_rect(color = "black", fill = NA),
#         axis.text.y = element_text(color = "black", face = "bold"),
#         axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, color = "black", face = "bold"),
#         strip.text.x = element_text(angle = 90, hjust = 0, vjust = 1, color = "black", face = "bold"),
#         strip.text.y = element_text(angle = 0, hjust = 0, vjust = 1, color = "black", face = "bold"),
#         strip.background = element_blank()) +
#   labs(x = "", y = "")

# ggsave("figures/ciliate-class-trophicmode.svg", width = 11, height = 6, device = "svg", limitsize = FALSE)
```

```{r,  fig.height=5, fig.width=10}
# spec_gene %>% 
#   # Get mean across transcripts from same gene and "species"
#   group_by(SequenceID, VENT_FIELD, VENT_BIN, LOCATION, full_classification, Class, Gene_identification, trophic_selection) %>% 
#   summarise(MEAN_TPM = mean(scaledTPM)) %>% 
#   ungroup() %>% 
#   unite(SAMPLE_INFO, VENT_FIELD, VENT_BIN, LOCATION, sep = "_", remove = FALSE) %>%
#   group_by(Class, trophic_selection) %>% 
#   summarise(COUNT = n()) %>% 
#   ggplot(aes(x = trophic_selection, y = 1, size = COUNT)) +
#   geom_point() +
#   facet_grid(
#              cols = vars(Class),
#              scales = "free_y", space = "free") +
#   scale_size_continuous(range = c(1,6)) +
#   theme_classic() +
#   theme(legend.position = "bottom",
#         panel.spacing = unit(0, 'lines'),
#         panel.border = element_rect(color = "black", fill = NA),
#         axis.text.y = element_blank(),
#         axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, color = "black", face = "bold"),
#         strip.text.x = element_text(angle = 90, hjust = 0, vjust = 1, color = "black", face = "bold"),
#         strip.text.y = element_text(angle = 0, hjust = 0, vjust = 1, color = "black", face = "bold"),
#         strip.background = element_blank()) +
#   labs(x = "", y = "")
# ggsave("figures/ciliate-class-trophicmode_dotplot.svg", width = 11, height = 5, device = "svg", limitsize = FALSE)
```

# K-means clustering

```{r}
# load("input-docs/gr_vd_longdf.RData", verbose = TRUE)
# head(long_df)
```

Determine anomalous outliers in metaT dataset.

```{r}
# library(anomalize)
# 
# long_df_outlier <- long_df %>% 
#   anomalize(scaledTPM, method = c("iqr"), max_anoms = 0.2, alpha = 0.05)
# 
# table(long_df_outlier$anomaly)
# 
# tmp <- long_df_outlier %>% 
#   filter(anomaly == "No")
# # range(tmp$scaledTPM)
# # range(long_df_outlier$scaledTPM)
# MIN_VAL <- min(tmp$scaledTPM)
# MAX_VAL <- max(tmp$scaledTPM)
# 
# # Replace maximum value to outliers in dataset.
# df_scaled_mcr_gr <- long_df_outlier %>%
#   unite(SAMPLE, VENT_FIELD, LOCATION, VENT_BIN, sep = "_") %>% 
#   mutate(scale_TPM_outlier = case_when(
#     anomaly == "Yes" ~ MAX_VAL,
#     TRUE ~ scaledTPM
#   ),
#   log_TPM = log(scaledTPM)) %>% 
#   mutate(SCALED_TPM_OUTLIER = data.frame(scale(scale_TPM_outlier))) %>% 
#   mutate(scaled_no_outlier = as.numeric(SCALED_TPM_OUTLIER$scale.scale_TPM_outlier.)) %>% 
#   mutate(VALUES = as.numeric(scaled_no_outlier))
# 
# # MIN_VAL
# range(df_scaled_mcr_gr$log_TPM)
# hist(df_scaled_mcr_gr$log_TPM)
# # range(df_scaled_mcr_gr$scaledTPM)
# range(df_scaled_mcr_gr$scale_TPM_outlier)
# range(df_scaled_mcr_gr$SCALED_TPM_OUTLIER)
# hist(df_scaled_mcr_gr$scaledTPM)
# hist(df_scaled_mcr_gr$scale_TPM_outlier)
# hist(df_scaled_mcr_gr$scaled_no_outlier)
```

Widen data and save for HPRC work.

```{r}
# str(df_scaled_mcr_gr)
# 
# df_output <- df_scaled_mcr_gr %>%
#   group_by(SequenceID, SAMPLE) %>% 
#     summarize(mean_value = mean(scaledTPM)) %>% 
#   mutate(log_TPM = log(mean_value)) %>% 
#   select(-mean_value) %>% 
#   pivot_wider(names_from = SAMPLE, values_from = log_TPM, values_fill = MIN_VAL) %>% 
#   column_to_rownames(var = "SequenceID")
# head(df_output)
# glimpse(df_output)
# save(df_output, file = "output/kmeans-data-obj.RData")
```

### Determine appropriate cluster number

Take formatted dataframe and run through kmeans clustering protocol. See script `run-kmeans01.R`.

```{r}
# | echo: true
# | eval: false
# library(broom)
# library(tidyverse)
# # load("output/kmeans-data-obj.RData", verbose = TRUE)
# load("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/kmeans-data-obj.RData", verbose = TRUE)
# # str(kmeans_input_mcr_gr)
# kclusts <-
#   tibble(k = 3:25) %>%
#   mutate(
#     kclust = map(k, ~ kmeans(df_output, .x)),
#     glanced = map(kclust, glance))
# 
# output_kclusts <- kclusts %>%
#   unnest(cols = c(glanced))

# write_delim(output_kclusts, file = "output/output_kclusts.txt")
# output_kclusts <- read.delim("output_kclusts.txt", sep = " ")
# head(output_kclusts)
```

```{r}
# output_kclusts %>% 
#   ggplot(aes(x = k, y = tot.withinss)) +
#     geom_line(alpha = 0.5, linewidth = 1.2, color = "darkgreen") +
#     geom_point(size = 2, color = "darkgreen") +
#   theme_linedraw() +
```

### Perform k-means clustering

See script `run-kmeans02.R`.

```{r}
# | echo: true
# | eval: false

# library(broom)

# frenemies_26_clust <- kmeans(df_output, centers = 26)
# 
# summary(frenemies_26_clust)
# 
# broom::tidy(frenemies_26_clust)
# 
# augment_frenemies <- augment(frenemies_26_clust, df_output)
# df_kmeans_frenemies <- (data.frame(augment_frenemies))
# 
# save(df_kmeans_frenemies, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/kmeansoutput-frenemies-metaT.RData")
```

Local

```{r}
# load("input-docs/kmeansoutput-frenemies-metaT.RData", verbose = TRUE)
# load("input-docs/gr_vd_longdf.RData", verbose = TRUE)
```

```{r}
# long_df_annot_cluster <- long_df_annot %>%
#   left_join(select(df_kmeans_frenemies, SequenceID = `.rownames`, CLUSTER = `.cluster`))
```

### Analyze k-means output

By taxonomic group.

```{r, fig.width=9, fig.height=6}
# all_taxa_metat_order <- c("Alveolata-Ciliophora", "Alveolata-Dinoflagellata", "Other Alveolata", "Amoebozoa", "Apusozoa", "Archaeplastida","Excavata", "Hacrobia", "Rhizaria-Cercozoa",  "Rhizaria-Radiolaria","Rhizaria",  "Stramenopiles", "Stramenopiles-Ochrophyta","Stramenopiles-Opalozoa;Sagenista",  "Opisthokonta", "Other-metaT only", "Unknown Eukaryota")
# 
# all_taxa_metat_color = c("#fa9fb5", "#c51b8a", "#1d91c0","#67000d", "#ef3b2c", "#ffffcc","#feb24c",  "#c7e9b4",  "#253494", "#9e9ac8","lightblue", "#238b45", "#54278f", "#bdbdbd", "#fee6ce", "#cb181d", "#636363","#000000")
# 
# long_df_annot_cluster %>% 
#   group_by(SUPERGROUP_18S, CLUSTER) %>% 
#   summarise(SUM_TPM = sum(scaledTPM),
#             COUNT = n()) %>% 
#   mutate(SUPERGROUP_ORDER = factor(SUPERGROUP_18S, level = all_taxa_metat_order)) %>% 
#   ggplot(aes(x = CLUSTER, y = SUM_TPM)) +
#     geom_bar(stat = "identity", color = "black", aes(fill = SUPERGROUP_18S)) +
#     scale_fill_manual(values = all_taxa_metat_color) +
#     # scale_alpha_manual(values = c(0.5, 1)) +
#     theme_linedraw() +
#     theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
#           strip.background = element_blank(),
#           strip.text = element_text(color = "black")) +
#   labs(x = "", y = "Total TPM for each cluster")
```

```{r, fig.width=9, fig.height=6}
# all_taxa_metat_order <- c("Alveolata-Ciliophora", "Alveolata-Dinoflagellata", "Other Alveolata", "Amoebozoa", "Apusozoa", "Archaeplastida","Excavata", "Hacrobia", "Rhizaria-Cercozoa",  "Rhizaria-Radiolaria","Rhizaria",  "Stramenopiles", "Stramenopiles-Ochrophyta","Stramenopiles-Opalozoa;Sagenista",  "Opisthokonta", "Other-metaT only", "Unknown Eukaryota")
# 
# all_taxa_metat_color = c("#fa9fb5", "#c51b8a", "#1d91c0","#67000d", "#ef3b2c", "#ffffcc","#feb24c",  "#c7e9b4",  "#253494", "#9e9ac8","lightblue", "#238b45", "#54278f", "#bdbdbd", "#fee6ce", "#cb181d", "#636363","#000000")
# 
# long_df_annot_cluster %>% 
#   group_by(SUPERGROUP_18S, VENT_BIN, CLUSTER) %>% 
#   summarise(SUM_TPM = sum(scaledTPM),
#             COUNT = n()) %>% 
#   mutate(SUPERGROUP_ORDER = factor(SUPERGROUP_18S, level = all_taxa_metat_order)) %>% 
#   ggplot(aes(x = CLUSTER, y = COUNT)) +
#     geom_bar(stat = "identity", color = "black", aes(fill = SUPERGROUP_18S, alpha = VENT_BIN)) +
#     scale_fill_manual(values = all_taxa_metat_color) +
#     scale_alpha_manual(values = c(0.5, 1)) +
#     theme_linedraw() +
#     theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
#           strip.background = element_blank(),
#           strip.text = element_text(color = "black")) +
#   labs(x = "", y = "Transcripts associated with each cluster")
```

# DESeq output

After running `frenemies-deseq_FEB.R` we want to look at output data.

```{r}
load("input-docs/DEoutput_only_frenemies_FEB.RData", verbose = TRUE)
```

Review DESeq object information

```{r}
de_output_frenemies
class(de_output_frenemies)
resultsNames(de_output_frenemies)
```

We have 3,829,081 transcripts evaluated in the DESeq dataset.

Report DESeq output. Using *contrast* with DESeq, I identify the parameter (TYPE) the numerator for the LC (Vent) and the denominator (Background)

```{r}
# frenemies_results <- results(de_output_frenemies)
# frenemies_results

# Below function means output LC change results represent + upreg in vents compared to - downreg in the background.
frenemies_results <- results(de_output_frenemies, contrast = c("TYPE","Vent","Background"))
frenemies_results
```

Output columns:

*baseMean* - average expression level across all samples. This is normalized by sequencing depth.

*log2foldchange* - vent vs. background fold change in expression of transcripts

*padj, adjusted p-value, p-value* for fold change comparison, also corrected for multiple testing

```{r}
summary(frenemies_results)
```

```{r}
mcols(frenemies_results)$description
```

```{r}
plotMA(frenemies_results)
```

## Extract log fold change information

Use the below information as a list of genes that are significantly upregulated across vent sites (both GR and MCR).

```{r}
# range(frenemies_results$log2FoldChange)
significant_frenemies_DE <-  data.frame(frenemies_results) %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in vent",
    log2FoldChange < 0 ~ "upregulated in background"
  ),
  SIGNIFICANT = case_when(
    pvalue <= 0.05 ~ "Significantly",
    TRUE ~ "Not significantly"
  )) %>% 
  filter(SIGNIFICANT == "Significantly") %>% 
  rownames_to_column(var = "SEQ_ID")

# write.csv(significant_frenemies_DE, file = "output/list-of-sig_upreg_vent_transcripts.csv")
```

> Explore identity of the significant upregulated transcripts for vent vs. background.

```{r}

```

## Extract transformed values

View distance matrix across samples.

```{r}
# ?vst()
vsd_frenemies <- vst(de_output_frenemies, fitType = "mean")
# head(vsd_frenemies)
# head(assay(vsd_frenemies), 3)
```

```{r}
# ?compositions::dist()
sampleDists <- dist(t(assay(vsd_frenemies)))
# head(sampleDists)

sampleDistMatrix <- as.matrix(sampleDists)

library(RColorBrewer);library(pheatmap)
rownames(sampleDistMatrix) <- paste(vsd_frenemies$SITE, vsd_frenemies$TYPE, vsd_frenemies$VENT, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette((brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
```

```{r}
# tmp <- data.frame(vsd_frenemies)
# class(vsd_frenemies)
# 
# colnames(frenemies_results)
# head(rownames(frenemies_results))
# frenemies_results$baseMean
```
