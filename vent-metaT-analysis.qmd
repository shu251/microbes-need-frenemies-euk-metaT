---
title: "Vent metatranscriptome"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

# Set up

Library

```{r}
library(tidyverse)
library(DESeq2)
# library(tximport)
library(ggupset)
library(ggdendro)
```

# Import data

Subset Gorda Ridge and Mid-Cayman Rise hydrothermal vent metatranscriptome data.

```{r}
# | echo: true
# | eval: false
load(file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/gr_vd_samples_vent_metaT.RData", verbose = TRUE)
```

`mean_counts_df`: mean of scaled TPM from tximport command. This is the correct TPM values that incorporate transcript length. When replicates were run across different flow cells (REP 1 vs. REP 2), these were averaged. Rownames equal the transcript IDs.

```{r}
# | echo: true
# | eval: false
taxfxn <- read.table("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/TaxonomicAndFunctionalAnnotations.csv", header = TRUE, sep = "\t")
# taxfxn <- read.table("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/TaxonomicAndFunctionalAnnotations.csv", header = TRUE, nrows = 250, sep = "\t")
```

## Make long dataframe

```{r}
# | echo: true
# | eval: false
# colnames(mean_counts_df)
long_df <- mean_counts_df %>% 
  rowwise() %>% 
  mutate(NUM_ZERO = sum(c_across(starts_with("mean.")) == 0)) %>% 
  rownames_to_column(var = "SequenceID") %>% 
  pivot_longer(cols = starts_with("mean."), values_to = "scaledTPM") %>% 
  filter(scaledTPM > 0) %>% 
  separate(name, c("mean.field", "LIBRARY_NUM", "fieldyear", "LOCATION", "SAMPLETYPE", "SAMPLEID"), "_", 
        remove = FALSE) %>% 
  select(-mean.field, -name) %>% 
  mutate(VENT_FIELD = case_when(grepl("Piccard", fieldyear) ~ "Piccard",
                           grepl("VonDamm", fieldyear) ~ "Von Damm",
         grepl("Axial", fieldyear) ~ "Axial",
         grepl("Gorda", fieldyear) ~ "Gorda Ridge")) %>% 
  mutate(VENT_BIN = case_when(
    (LOCATION == "Background" | LOCATION == "Plume" | LOCATION == "BSW") ~ "Non-vent",
    grepl("IntlDistrict", LOCATION) ~ "Non-vent", 
    grepl("ASHES", LOCATION) ~ "Non-vent", 
    TRUE ~ "Vent"
  ))
glimpse(long_df)
```

## Join with tax and fxn

```{r}
# | echo: true
# | eval: false
# glimpse(taxfxn)
long_df_annot <- long_df %>% 
  left_join(taxfxn, by = "SequenceID") %>% 
  separate(full_classification, c("Domain", "Supergroup", "Phylum", "Class", "Order", "Family", "Genus_spp"), sep = "; ", remove = FALSE) %>% 
  mutate(SUPERGROUP_18S = case_when(
    Phylum == "Ciliophora" ~ "Alveolata-Ciliophora",
    Phylum == "Dinophyta" ~ "Alveolata-Dinoflagellata",
    # Phylum == "Perkinsea" ~ "Protalveolata",
    # Phylum == "Colponemidia" ~ "Protalveolata",
    # Phylum == "Chromerida" ~ "Protalveolata",
    Supergroup == "Alveolata" ~ "Other Alveolata",
    Supergroup %in% as_is ~ Supergroup,
    Supergroup == "Haptista" ~ "Hacrobia",
    Phylum == "Radiolaria" ~ "Rhizaria-Radiolaria",
    Phylum == "Cercozoa" ~ "Rhizaria-Cercozoa",
    (Supergroup == "Rhizaria" & Phylum != "Radiolaria" & Phylum != "Cercozoa") ~ "Rhizaria",
    Order == "Bigyra" ~ "Stramenopiles-Opalozoa;Sagenista",
    Class == "Ochromonadales" ~ "Stramenopiles-Ochrophyta",
    Supergroup == "Stramenopiles" ~ "Stramenopiles",
    Supergroup == "Opisthokonta" ~ "Opisthokonta",
    (is.na(Supergroup) | Supergroup == "Eukaryota incertae sedis") ~ "Unknown Eukaryota",
    TRUE ~ "Other-metaT only"))
# head(long_df_annot)
dim(long_df_annot);dim(long_df)
```

```{r}
# | echo: true
# | eval: false
# save(long_df, long_df_annot, file = "tmp_longdf.RData")
```

# Import data locally

```{r}
load(file = "input-docs/gr_vd_longdf.RData", verbose = TRUE)
```

## Trial with toy dataset

Import toy dataset. Derived from randomly subsampling 3000 transcripts from full sample list.

```{r}
# load(file = "input-docs/tmp_longdf_3000.RData", verbose = TRUE)
# long_df <- long_df_3000
# long_df_annot <- long_df_annot_3000
```

# Get basic data stats

Output information about the overall dataset.

```{r}
colnames(long_df_annot)
unique_sample_names <- long_df_annot %>% 
  select(fieldyear, LOCATION, SAMPLETYPE, SAMPLEID, VENT_FIELD, VENT_BIN) %>% 
  distinct()

total_samples <- dim(unique_sample_names)[1]
```

-   Total number of samples: `r total_samples`
-   Total number of samples by vent field and sample type:

```{r}
table(unique_sample_names$VENT_FIELD)
```

```{r}
table(unique_sample_names$VENT_BIN)
```

```{r}
x <- length(unique(long_df_annot$SequenceID)); x
# range(long_df_annot$NUM_ZERO)
# range(long_df_annot$scaledTPM)
```

-   Total number of transcripts: `r x`
-   It should read: 281,172

```{r}
unique(long_df_annot$Domain)
unique(long_df_annot$Supergroup)

y <- sum(is.na(long_df_annot$Supergroup));y
yx <- length(unique(filter(long_df_annot, Supergroup == "Eukaryota incertae sedis"))$SequenceID);yx
# y;yx
```

-   Total number of `NA` at the supergroup level `r y`
-   Total number of `incertae sedis` at the supergroup level `r yx`

```{r}
kegg <- length(unique((long_df_annot %>% 
  filter(KEGG_ko == "-"))$SequenceID))
go <- length(unique((long_df_annot %>% 
  filter(GOs == "-"))$SequenceID))
pfam <- length(unique((long_df_annot %>% 
  filter(PFAMs == "-"))$SequenceID))
kegg;go;pfam
```

-   Total number of `NA` for KEGG IDs `r kegg`
-   Total number of `NA` for Gene Ontology (GO terms) `r go`
-   Total number of `NA` for PFAM ID `r pfam`

Compare the TPM value for a transcript by the number of samples that the transcript appears.

```{r}
# max <- range(long_df_annot$NUM_ZERO)[2]
# total_samples # use value from above
long_df_annot %>% 
  mutate(Number_of_samples = total_samples - NUM_ZERO) %>% 
ggplot(aes(x = Number_of_samples, y = scaledTPM)) +
  geom_point(stat = "identity") +
  theme_minimal()
```

Repeat, remove TPM \<= 10.

```{r}
long_df_annot %>% 
  filter(scaledTPM >=10) %>% 
  mutate(Number_of_samples = total_samples - NUM_ZERO) %>% 
ggplot(aes(x = Number_of_samples, y = scaledTPM)) +
  geom_point(stat = "identity") +
  theme_minimal()
```

> Take-homes about these figures: Most of the transcripts that also have a higher TPM value appear in \~4-6 of the samples. This doesn't really change when we subsample to transcripts that have 10 or greater total TPMs. Fewer transcripts are found in more than 12 or so samples at a time. And of those, the majority have \<1000 TPM.

Total number of transcripts (and % of data) removed when we subset to transcripts that appear in more than 1 sample.

```{r}
total <- length(unique(long_df_annot$SequenceID))
# total
more_than_2 <- (total_samples - 1)

a <- length(unique(long_df_annot %>% 
  filter(NUM_ZERO < more_than_2))$SequenceID)

100*(a/total)
```

-   Percentage of transcripts kept when we subsample so all transcripts have to appear in at least 2 samples: `r (100*(a/total))`

> 50% is totally fine to deal with moving forward.

# Shared vs. unique

Starting with long dataframe. What transcripts are shared vs unique across vent fields and within or outside of the vent fields.

Then summarise to individual taxa. And then again to individual KEGG IDs.

## Pre-process

This step is necessary because the KEGG ID information added onto the full dataset caused lots of replication in the KEGG IDs.

```{r}
# dim(long_df_annot)
upset_input <- long_df_annot %>% 
  filter(NUM_ZERO < more_than_2) %>%
  unite(SAMPLE_NAME, VENT_BIN, VENT_FIELD, LOCATION, sep = " ", remove = FALSE) %>% 
  select(SAMPLE_NAME, SequenceID, KEGG_ko, SUPERGROUP_18S, scaledTPM) %>% 
  distinct()
dim(upset_input)  
```

```{r}
# upset_input %>% 
#   filter(VENT_BIN == "Vent") %>%
#   group_by(SequenceID) %>% 
#     summarise(SAMPLE = list(SAMPLE_NAME)) %>% 
#   ggplot(aes(x = SAMPLE)) +
#     ggupset::scale_x_upset(n_intersections = 20)
```

Repeat upsetR, with functional annotation information.

```{r, fig.height=8, fig.width=13}
upset_input %>%
  # filter(grepl("Vent ", SAMPLE_NAME)) %>%
  mutate(FXN_BIN = case_when(
    KEGG_ko == "-" ~ "No gene ID",
    TRUE ~ "Gene ID assigned")) %>%
  group_by(SequenceID, FXN_BIN) %>%
    summarise(SAMPLE = list(SAMPLE_NAME)) %>%
  ggplot(aes(x = SAMPLE, fill = FXN_BIN)) +
    geom_bar(color = NA, width = 0.7, aes(fill = FXN_BIN)) +
    ggupset::scale_x_upset(order_by = "freq", n_intersections = 30) +
    scale_y_continuous(expand = c(0,0)) +
    labs(x = "", y = "Shared ASVs") +
    theme_linedraw()
```

```{r, fig.height=8, fig.width=13}
upset_input %>%
  filter(grepl("Vent ", SAMPLE_NAME)) %>%
  mutate(FXN_BIN = case_when(
    KEGG_ko == "-" ~ "No gene ID",
    TRUE ~ "Gene ID assigned")) %>%
  group_by(SequenceID, FXN_BIN) %>%
    summarise(SAMPLE = list(SAMPLE_NAME)) %>%
  ggplot(aes(x = SAMPLE, fill = FXN_BIN)) +
    geom_bar(color = NA, width = 0.7, aes(fill = FXN_BIN)) +
    ggupset::scale_x_upset(order_by = "freq", n_intersections = 30) +
    scale_y_continuous(expand = c(0,0)) +
    labs(x = "", y = "Shared ASVs") +
    theme_linedraw()
```

## What are these unique transcripts?

```{r}
unique_transcripts <- long_df_annot %>% 
  filter(NUM_ZERO == more_than_2)

length(unique(unique_transcripts$SequenceID))

seqID_unique <- as.character(unique(unique_transcripts$SequenceID))
```

# DESeq

See output from `subset-txi_Plume-v-BSW.R` and `metaT-deseq-Vent_NonVent-all.R` to look for DESeq analysis and relevant output.

```{r}
# | echo: true
# | eval: false
load("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/background_vs_plume_DESeq.RData", verbose = TRUE)
```

```{r}
# | echo: true
# | eval: false
load(file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/all-vent-sites_vent_vs_novent_DESeq.RData", verbose = TRUE)
# de_all_fields, de_all_fields_unannot
```

## Vent vs. non-vent

Across vent fields, what is significantly upregulated and downregulated in vent vs. non-vent samples?

```{r}
# | echo: true
# | eval: false
glimpse(de_all_fields)
```

```{r}
# | echo: true
# | eval: false
results_all_fields <- DESeq2::results(de_all_fields, alpha = 0.05)
```

Positive log fold change == up regulated in Vent, compared to Non-vent

```{r}
# | echo: true
# | eval: false
plot_vent_v_nonvent <- data.frame(results_all_fields) %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in vent",
    log2FoldChange < 0 ~ "upregulated in non-vent"
  ),
  SIGNIFICANT = case_when(
    pvalue <= 0.05 ~ "Significantly",
    TRUE ~ "Not significantly"
  )) %>% 
  ggplot(aes(x = baseMean, y = log2FoldChange, color = SIGNIFICANT)) +
  geom_point(stat = "identity") +
  scale_x_log10() +
  theme_classic() +
  scale_color_manual(values = c("#878787", "#d73027")) +
  labs(title = mcols(results_all_fields)$description[2])

allfields_vent_v_nonvent_transcripts <- data.frame(results_all_fields) %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in vent",
    log2FoldChange < 0 ~ "upregulated in non-vent"
  ),
  SIGNIFICANT = case_when(
    pvalue <= 0.05 ~ "Significantly",
    TRUE ~ "Not significantly"
  )) %>% 
  # filter(SIGNIFICANT == "Significantly") %>% 
  rownames_to_column(var = "SequenceID")
```

Table output for documentation.

```{r}
# | echo: true
# | eval: false
allfields_vent_v_nonvent_transcripts %>% 
  group_by(REGULATION, SIGNIFICANT) %>% 
    summarise(Number_of_transcripts = n())
```

## Plume vs. Background

Positive log fold change == up regulated in Plume, relative to Background deep seawater.

```{r}
# | echo: true
# | eval: false
glimpse(de_bsw_plume_annotall)
```

```{r}
# | echo: true
# | eval: false
results_bsw_plume <- DESeq2::results(de_bsw_plume_annotall, alpha = 0.05)
```

```{r}
# | echo: true
# | eval: false
plot_bsw_v_plume <- data.frame(results_bsw_plume) %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in plume",
    log2FoldChange < 0 ~ "upregulated in background"
  ),
  SIGNIFICANT = case_when(
    pvalue <= 0.05 ~ "Significantly",
    TRUE ~ "Not significantly"
  )) %>% 
  ggplot(aes(x = baseMean, y = log2FoldChange, color = SIGNIFICANT)) +
  geom_point(stat = "identity") +
  scale_x_log10() +
  theme_classic() +
  scale_color_manual(values = c("#878787", "#d73027")) +
  labs(title = mcols(results_bsw_plume)$description[2])

plume_bsw_transcripts <- data.frame(results_bsw_plume) %>% 
  mutate(REGULATION = case_when(
    log2FoldChange > 0 ~ "upregulated in plume",
    log2FoldChange < 0 ~ "upregulated in background"
  ),
  SIGNIFICANT = case_when(
    pvalue <= 0.05 ~ "Significantly",
    TRUE ~ "Not significantly"
  )) %>% 
  # filter(SIGNIFICANT == "Significantly") %>% 
  rownames_to_column(var = "SequenceID")
```

Table output for documentation.

```{r}
# | echo: true
# | eval: false
plume_bsw_transcripts %>% 
  group_by(REGULATION, SIGNIFICANT) %>% 
    summarise(Number_of_transcripts = n())
```

## Compare number of unique transcripts with what is signigicant, etc.

```{r}
load(file = "input-docs/DESeq-output-GR_VD.RData",verbose = TRUE)
```

```{r}
# glimpse(plot_vent_v_nonvent)
```

```{r}
compare_transcript_variables <- allfields_vent_v_nonvent_transcripts %>% 
  select(SequenceID, Vent_v_nonVent = REGULATION) %>% 
  left_join((plume_bsw_transcripts %>% 
              select(SequenceID, Plume_v_bsw = REGULATION))) %>% 
  mutate(Appears_once = case_when(
    SequenceID %in% seqID_unique ~ "Appears once",
    TRUE ~ NA
  ))
```

For transcripts that appear in more than 1 sample, how many were upregulated in the non-vent AND plume or background? Based on presence/absence - these are most likely to be indicative of non-vent signature.

```{r}
background_signature <- compare_transcript_variables %>% 
  filter(is.na(Appears_once)) %>% 
  filter((Vent_v_nonVent == "upregulated in non-vent") & !is.na(Plume_v_bsw))
```

For transcripts that appear in more than 1 sample, how many were upregulated in the vent only?

```{r}
vent_signature <- compare_transcript_variables %>% 
  filter(is.na(Appears_once)) %>% 
  filter(Vent_v_nonVent == "upregulated in vent")
```

# Taxonomic breakdown

SampleID is not included for taxonomic summary, but will be included for dendrogram analysis.

## Preprocess

```{r}
# head(long_df_annot)
for_tax <- long_df_annot %>% 
  select(NUM_ZERO, LOCATION, VENT_FIELD, VENT_BIN, full_classification, Supergroup, Phylum, Class, Order, Family, Genus_spp, SUPERGROUP_18S, scaledTPM) %>% 
  filter(NUM_ZERO < 35)
```

## Bar plot of taxa

```{r}
all_taxa_metat_order <- c("Alveolata-Ciliophora", "Alveolata-Dinoflagellata", "Other Alveolata", "Amoebozoa", "Apusozoa", "Archaeplastida","Excavata", "Hacrobia", "Rhizaria-Cercozoa",  "Rhizaria-Radiolaria","Rhizaria",  "Stramenopiles", "Stramenopiles-Ochrophyta","Stramenopiles-Opalozoa;Sagenista",  "Opisthokonta", "Other-metaT only", "Unknown Eukaryota")

all_taxa_metat_color = c("#fa9fb5", "#c51b8a", "#1d91c0","#67000d", "#ef3b2c", "#ffffcc","#feb24c",  "#c7e9b4",  "#253494", "#9e9ac8","lightblue", "#238b45", "#54278f", "#bdbdbd", "#fee6ce", "#cb181d", "#636363","#000000")

# as_is <- c("Amoebozoa", "Apusozoa", "Excavata", "Hacrobia", "Archaeplastida")
```

```{r, fig.height=10, fig.width=12}
for_tax %>% 
  mutate(SUPERGROUP_18S_ORDER = factor(SUPERGROUP_18S, levels = all_taxa_metat_order)) %>% 
  group_by(VENT_FIELD, VENT_BIN, LOCATION, SUPERGROUP_18S_ORDER) %>% 
    summarise(MEAN = mean(scaledTPM)) %>% 
  ggplot(aes(x = LOCATION, y = MEAN, fill = SUPERGROUP_18S_ORDER)) +
  geom_bar(stat = "identity", position = "fill", color = "black") +
  scale_fill_manual(values = all_taxa_metat_color) +
    theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Relative abundance transcript count") +
  facet_grid(cols = vars(VENT_FIELD, VENT_BIN), scales = "free_x", space = "free")
```

Try above after removing transcripts that appear in only 1 sample.

Repeat taxonomy breakdown, go to family level, etc.

```{r}
taxa_keep <- c("Alveolata-Ciliophora", "Alveolata-Dinoflagellata", "Amoebozoa", "Excavata", "Hacrobia", "Rhizaria-Cercozoa", "Rhizaria-Radiolaria", "Rhizaria")
pink_qual <- c("#fff7f3", "#fcc5c0", "#fa9fb5","#f768a1","#dd3497", "#ae017e", "#7a0177", "black")
```

```{r}
for_tax %>% 
  filter(SUPERGROUP_18S %in% taxa_keep) %>% 
  mutate(SUPERGROUP_18S_ORDER = factor(SUPERGROUP_18S, levels = all_taxa_metat_order)) %>% 
  group_by(VENT_FIELD, VENT_BIN, LOCATION, SUPERGROUP_18S_ORDER, Family) %>% 
    summarise(MEAN_family = mean(scaledTPM),
              logFamily = log(MEAN_family)) %>% 
  ggplot(aes(x = LOCATION, y = Family, fill = logFamily)) +
  geom_tile(stat = "identity", linewidth = 0.1, color = "black") +
      scale_fill_stepsn(
      # limits = c(-10,10),
      na.value = NA,
      show.limits = TRUE,
      colors = pink_qual) +
  facet_grid(rows = vars(SUPERGROUP_18S_ORDER), cols = vars(VENT_BIN, VENT_FIELD), scales = "free", space = "free") +
  theme_minimal() +
  theme(axis.text.y = element_text(color = "black"),
        axis.text.x = element_text(color = "black", angle = 90, hjust = 1, vjust = 0))
```

## Dendrogram by taxa

```{r}
for_tax_dendro <- long_df_annot %>% 
  filter(NUM_ZERO < 35) %>%
  unite(SAMPLENAME, VENT_FIELD, VENT_BIN, LOCATION, SAMPLEID, sep = "_") %>% 
  group_by(full_classification, SAMPLENAME) %>% 
    summarise(SUM_bytax = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLENAME, values_from = SUM_bytax, values_fill = 0) %>% 
  column_to_rownames(var = "full_classification")
```

Compute jaccard distances across all samples.

```{r}
dendro_jacc_tax <- vegan::vegdist(t(for_tax_dendro), method = "jaccard")
cluster_jacc_tax <- hclust(dist(t(dendro_jacc_tax)), method = "average")

# library(ggdendro)
dendro_plot_tax <- ggdendro::dendro_data(as.dendrogram(cluster_jacc_tax), type = "rectangle")
label_dendro_order_tax <- as.character(dendro_plot_tax$labels$label)
```

### Plot dendrogram by taxonomy

```{r, fig.height=8, fig.width=8}
# range(segment(dendro_plot_tax)$y)
# (dendro_plot_tax$labels)
# class(dendro_plot_tax)
dendro_plot_tax <- ggplot(segment(dendro_plot_tax)) + 
  geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) + 
  coord_flip(clip = "off") + 
  scale_y_reverse() + 
  geom_text(aes(x = x, y = y, 
                label = label, 
                angle = 0, hjust = 0, color = ), 
            data = label(dendro_plot_tax)) + 
  theme_dendro() + 
  labs(y = "Dissimilarity", title = "Jaccard distance") + 
  theme(axis.text.x = element_text(color = "black", size = 14), 
        axis.line.x = element_line(color = "#252525"), 
        axis.ticks.x = element_line(), 
        axis.title.x = element_text(color = "black", size = 14),
        plot.margin = unit(c(1,16,1,1), "lines")) 
dendro_plot_tax
# margin(t, r, l, b)
```

# Functional breakdown

## Preprocess

```{r}
kegg <- read.csv("../KEGG_DB/combined_kegg.csv")
# dim(kegg)
kegg <- kegg %>% select(KEGG = KO_number, everything(), -X)
curated_kegg <- read.csv("../KEGG_DB/reformat-kegg-pfam-skh.csv")
# head(curated_kegg)

key_geneid <- kegg %>% 
  distinct() %>% 
  left_join(curated_kegg, multiple = "all", by = join_by(KEGG)) %>% 
  select(starts_with("KeggOrthology_"), Category01, Category02, FullName, GeneID, Gene_identification, KEGG, PFAM, Descriptions, REF = REFs)
```

```{r}
long_df_fxn_mod <- long_df_annot %>% 
  separate_longer_delim(KEGG_ko, delim = ",") %>% 
  mutate(KEGG = str_remove_all(KEGG_ko, "ko:")) %>%
  filter(NUM_ZERO < 35) %>% 
  select(LOCATION, VENT_FIELD, VENT_BIN, SAMPLEID, scaledTPM, KEGG, PFAMs, GOs) %>% 
  left_join(key_geneid, by = "KEGG")
```

## Summary of transcriptional profiles

By KEGG, level A.

```{r}
long_df_fxn_mod %>% 
  select(LOCATION, VENT_FIELD, VENT_BIN, scaledTPM, KEGG, KeggOrthology_A) %>% 
  distinct() %>% 
  group_by(LOCATION, VENT_FIELD, VENT_BIN, KeggOrthology_A) %>% 
    summarise(SUM_A = sum(scaledTPM)) %>% 
  ggplot(aes(x = LOCATION, y = SUM_A, fill = KeggOrthology_A)) +
    geom_bar(stat = "identity", position = "fill") +
  theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Relative abundance transcript count") +
  facet_grid(cols = vars(VENT_FIELD, VENT_BIN), scales = "free_x", space = "free")
```

By KEGG category: Metabolism.

```{r}
long_df_fxn_mod %>% 
  filter(KeggOrthology_A == "Metabolism") %>% 
  select(LOCATION, VENT_FIELD, VENT_BIN, scaledTPM, KEGG, KeggOrthology_B) %>% 
  distinct() %>% 
  group_by(LOCATION, VENT_FIELD, VENT_BIN, KeggOrthology_B) %>% 
    summarise(SUM_A = sum(scaledTPM)) %>% 
  ggplot(aes(x = LOCATION, y = SUM_A, fill = KeggOrthology_B)) +
    geom_bar(stat = "identity", position = "fill") +
  theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Relative abundance transcript count") +
  facet_grid(cols = vars(VENT_FIELD, VENT_BIN), scales = "free_x", space = "free")
```

By KEGG category: Metabolism.

```{r}
long_df_fxn_mod %>% 
  filter(KeggOrthology_A == "Cellular Processes") %>% 
  select(LOCATION, VENT_FIELD, VENT_BIN, scaledTPM, KEGG, KeggOrthology_B) %>% 
  distinct() %>% 
  group_by(LOCATION, VENT_FIELD, VENT_BIN, KeggOrthology_B) %>% 
    summarise(SUM_A = sum(scaledTPM)) %>% 
  ggplot(aes(x = LOCATION, y = SUM_A, fill = KeggOrthology_B)) +
    geom_bar(stat = "identity", position = "fill") +
  theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Relative abundance transcript count") +
  facet_grid(cols = vars(VENT_FIELD, VENT_BIN), scales = "free_x", space = "free")
```

By KEGG, level B.

```{r}
long_df_fxn_mod %>% 
  select(LOCATION, VENT_FIELD, VENT_BIN, scaledTPM, KEGG, KeggOrthology_B) %>% 
  distinct() %>% 
  group_by(LOCATION, VENT_FIELD, VENT_BIN, KeggOrthology_B) %>% 
    summarise(SUM_A = sum(scaledTPM)) %>% 
  ggplot(aes(x = LOCATION, y = SUM_A, fill = KeggOrthology_B)) +
    geom_bar(stat = "identity", position = "fill") +
  theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Relative abundance transcript count") +
  facet_grid(cols = vars(VENT_FIELD, VENT_BIN), scales = "free_x", space = "free")
```

## Dendrogram by function

First by KEGG orthology IDs.

```{r}
for_kegg_dendro <- long_df_fxn_mod %>% 
  filter(KEGG != "-") %>% 
  unite(SAMPLENAME, VENT_FIELD, VENT_BIN, LOCATION, SAMPLEID, sep = "_") %>% 
  select(SAMPLENAME, KEGG, scaledTPM) %>% distinct() %>% 
  group_by(KEGG, SAMPLENAME) %>% 
    summarise(SUM_byKegg = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLENAME, values_from = SUM_byKegg, values_fill = 0) %>% 
  column_to_rownames(var = "KEGG")
```

Repeat for PFAM IDs

```{r}
for_pfam_dendro <- long_df_fxn_mod %>% 
  filter(PFAMs != "-") %>% 
  unite(SAMPLENAME, VENT_FIELD, VENT_BIN, LOCATION, SAMPLEID, sep = "_") %>% 
  select(SAMPLENAME, PFAMs, scaledTPM) %>% distinct() %>% 
  group_by(PFAMs, SAMPLENAME) %>% 
    summarise(SUM_bypfam = sum(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLENAME, values_from = SUM_bypfam, values_fill = 0) %>% 
  column_to_rownames(var = "PFAMs")
```

Compute jaccard distances across all samples.

For KEGG ID

```{r}
library(ggdendro)
dendro_jacc_kegg <- vegan::vegdist(t(for_kegg_dendro), method = "jaccard")
cluster_jacc_kegg <- hclust(dist(t(dendro_jacc_kegg)), method = "average")

dendro_plot_kegg <- ggdendro::dendro_data(as.dendrogram(cluster_jacc_kegg), type = "rectangle")
label_dendro_order_kegg <- as.character(dendro_plot_kegg$labels$label)
```

### Plot dendrogram by function

```{r, fig.height=8, fig.width=8}
# range(segment(dendro_plot_kegg)$y)
dendro_plot_fxn <- ggplot(segment(dendro_plot_kegg)) + 
  geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) + 
  coord_flip(clip = "off") + 
  scale_y_reverse() + 
  geom_text(aes(x = x, y = y, label = label, angle = 0, hjust = 0), data = label(dendro_plot_kegg)) + 
  theme_dendro() + 
  labs(y = "Dissimilarity", title = "Jaccard distance") + 
  theme(axis.text.x = element_text(color = "black", size = 14), 
        axis.line.x = element_line(color = "#252525"), 
        axis.ticks.x = element_line(), 
        axis.title.x = element_text(color = "black", size = 14),
        plot.margin = unit(c(1,16,1,1), "lines")) 
dendro_plot_fxn
# margin(t, r, l, b)
```

#### Combine dendros

```{r, fig.width=16, fig.height=8}
dendro_plot_tax + dendro_plot_fxn + patchwork::plot_layout(ncol = 2)
```

# K-means clustering

```{r}
load("input-docs/gr_vd_longdf.RData", verbose = TRUE)
# head(long_df)
```

Determine anomalous outliers in metaT dataset.

```{r}
library(anomalize)

long_df_outlier <- long_df %>% 
  anomalize(scaledTPM, method = c("iqr"), max_anoms = 0.2, alpha = 0.05)

table(long_df_outlier$anomaly)

tmp <- long_df_outlier %>% 
  filter(anomaly == "No")
# range(tmp$scaledTPM)
# range(long_df_outlier$scaledTPM)
MIN_VAL <- min(tmp$scaledTPM)
MAX_VAL <- max(tmp$scaledTPM)

# Replace maximum value to outliers in dataset.
df_scaled_mcr_gr <- long_df_outlier %>%
  unite(SAMPLE, VENT_FIELD, LOCATION, VENT_BIN, sep = "_") %>% 
  mutate(scale_TPM_outlier = case_when(
    anomaly == "Yes" ~ MAX_VAL,
    TRUE ~ scaledTPM
  ),
  log_TPM = log(scaledTPM)) %>% 
  mutate(SCALED_TPM_OUTLIER = data.frame(scale(scale_TPM_outlier))) %>% 
  mutate(scaled_no_outlier = as.numeric(SCALED_TPM_OUTLIER$scale.scale_TPM_outlier.)) %>% 
  mutate(VALUES = as.numeric(scaled_no_outlier))

# MIN_VAL
range(df_scaled_mcr_gr$log_TPM)
hist(df_scaled_mcr_gr$log_TPM)
# range(df_scaled_mcr_gr$scaledTPM)
range(df_scaled_mcr_gr$scale_TPM_outlier)
range(df_scaled_mcr_gr$SCALED_TPM_OUTLIER)
hist(df_scaled_mcr_gr$scaledTPM)
hist(df_scaled_mcr_gr$scale_TPM_outlier)
hist(df_scaled_mcr_gr$scaled_no_outlier)
```

Widen data and save for HPRC work.

```{r}
str(df_scaled_mcr_gr)

df_output <- df_scaled_mcr_gr %>%
  group_by(SequenceID, SAMPLE) %>% 
    summarize(mean_value = mean(scaledTPM)) %>% 
  mutate(log_TPM = log(mean_value)) %>% 
  select(-mean_value) %>% 
  pivot_wider(names_from = SAMPLE, values_from = log_TPM, values_fill = MIN_VAL) %>% 
  column_to_rownames(var = "SequenceID")
# head(df_output)
# glimpse(df_output)
# save(df_output, file = "output/kmeans-data-obj.RData")
```


### Determine appropriate cluster number

Take formatted dataframe and run through kmeans clustering protocol. See script `run-kmeans01.R`.

```{r}
# | echo: true
# | eval: false
library(broom)
library(tidyverse)
# load("output/kmeans-data-obj.RData", verbose = TRUE)
load("/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/kmeans-data-obj.RData", verbose = TRUE)
# str(kmeans_input_mcr_gr)
kclusts <-
  tibble(k = 3:25) %>%
  mutate(
    kclust = map(k, ~ kmeans(df_output, .x)),
    glanced = map(kclust, glance))

output_kclusts <- kclusts %>%
  unnest(cols = c(glanced))

# write_delim(output_kclusts, file = "output/output_kclusts.txt")
# output_kclusts <- read.delim("output_kclusts.txt", sep = " ")
# head(output_kclusts)
```

```{r}
output_kclusts %>% 
  ggplot(aes(x = k, y = tot.withinss)) +
    geom_line(alpha = 0.5, linewidth = 1.2, color = "darkgreen") +
    geom_point(size = 2, color = "darkgreen") +
  theme_linedraw() +
```

### Perform k-means clustering

See script `run-kmeans02.R`.

```{r}
# | echo: true
# | eval: false

# library(broom)

frenemies_26_clust <- kmeans(df_output, centers = 26)

summary(frenemies_26_clust)

broom::tidy(frenemies_26_clust)

augment_frenemies <- augment(frenemies_26_clust, df_output)
df_kmeans_frenemies <- (data.frame(augment_frenemies))

save(df_kmeans_frenemies, file = "/scratch/group/hu-lab/frenemies/euk-metaT-eukrhythmic-output/kmeansoutput-frenemies-metaT.RData")
```



```{r}
load("input-docs/kmeansoutput-frenemies-metaT.RData", verbose = TRUE)
load("input-docs/gr_vd_longdf.RData", verbose = TRUE)
```

```{r}
# glimpse(df_kmeans_frenemies)
long_df_annot_cluster <- long_df_annot %>% 
  left_join(select(df_kmeans_frenemies, SequenceID = `.rownames`, CLUSTER = `.cluster`))

glimpse(long_df_annot_cluster)
```
### Analyze k-means output


By taxonomic group.
```{r, fig.width=9, fig.height=6}
all_taxa_metat_order <- c("Alveolata-Ciliophora", "Alveolata-Dinoflagellata", "Other Alveolata", "Amoebozoa", "Apusozoa", "Archaeplastida","Excavata", "Hacrobia", "Rhizaria-Cercozoa",  "Rhizaria-Radiolaria","Rhizaria",  "Stramenopiles", "Stramenopiles-Ochrophyta","Stramenopiles-Opalozoa;Sagenista",  "Opisthokonta", "Other-metaT only", "Unknown Eukaryota")

all_taxa_metat_color = c("#fa9fb5", "#c51b8a", "#1d91c0","#67000d", "#ef3b2c", "#ffffcc","#feb24c",  "#c7e9b4",  "#253494", "#9e9ac8","lightblue", "#238b45", "#54278f", "#bdbdbd", "#fee6ce", "#cb181d", "#636363","#000000")

long_df_annot_cluster %>% 
  group_by(SUPERGROUP_18S, VENT_BIN, CLUSTER) %>% 
  summarise(SUM_TPM = sum(scaledTPM),
            COUNT = n()) %>% 
  mutate(SUPERGROUP_ORDER = factor(SUPERGROUP_18S, level = all_taxa_metat_order)) %>% 
  ggplot(aes(x = CLUSTER, y = SUM_TPM)) +
    geom_bar(stat = "identity", color = "black", aes(fill = SUPERGROUP_18S, alpha = VENT_BIN)) +
    scale_fill_manual(values = all_taxa_metat_color) +
    scale_alpha_manual(values = c(0.5, 1)) +
    theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Total TPM for each cluster")
```
```{r, fig.width=9, fig.height=6}
all_taxa_metat_order <- c("Alveolata-Ciliophora", "Alveolata-Dinoflagellata", "Other Alveolata", "Amoebozoa", "Apusozoa", "Archaeplastida","Excavata", "Hacrobia", "Rhizaria-Cercozoa",  "Rhizaria-Radiolaria","Rhizaria",  "Stramenopiles", "Stramenopiles-Ochrophyta","Stramenopiles-Opalozoa;Sagenista",  "Opisthokonta", "Other-metaT only", "Unknown Eukaryota")

all_taxa_metat_color = c("#fa9fb5", "#c51b8a", "#1d91c0","#67000d", "#ef3b2c", "#ffffcc","#feb24c",  "#c7e9b4",  "#253494", "#9e9ac8","lightblue", "#238b45", "#54278f", "#bdbdbd", "#fee6ce", "#cb181d", "#636363","#000000")

long_df_annot_cluster %>% 
  group_by(SUPERGROUP_18S, VENT_BIN, CLUSTER) %>% 
  summarise(SUM_TPM = sum(scaledTPM),
            COUNT = n()) %>% 
  mutate(SUPERGROUP_ORDER = factor(SUPERGROUP_18S, level = all_taxa_metat_order)) %>% 
  ggplot(aes(x = CLUSTER, y = COUNT)) +
    geom_bar(stat = "identity", color = "black", aes(fill = SUPERGROUP_18S, alpha = VENT_BIN)) +
    scale_fill_manual(values = all_taxa_metat_color) +
    scale_alpha_manual(values = c(0.5, 1)) +
    theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Transcripts associated with each cluster")
```


```{r, fig.width=9, fig.height=6}

long_df_annot_cluster %>% 
  group_by(VENT_FIELD, VENT_BIN, CLUSTER) %>% 
  summarise(SUM_TPM = sum(scaledTPM),
            COUNT = n()) %>% 
  # mutate(SUPERGROUP_ORDER = factor(SUPERGROUP_18S, level = all_taxa_metat_order)) %>% 
  ggplot(aes(x = CLUSTER, y = COUNT)) +
    geom_bar(stat = "identity", color = "black", aes(fill = VENT_FIELD, alpha = VENT_BIN)) +
    # scale_fill_manual(values = all_taxa_metat_color) +
    scale_alpha_manual(values = c(0.5, 1)) +
    theme_linedraw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          strip.background = element_blank(),
          strip.text = element_text(color = "black")) +
  labs(x = "", y = "Transcripts associated with each cluster")
```

# PCA-ordination

Use vent samples only, across vent fields are OK.

```{r}
load("input-docs/gr_vd_longdf.RData", verbose = TRUE)
# head(long_df)
```

Convert to wide format, but first determine what the minimum TPM value is and use as a zero in the upcoming PCA.

```{r}
MIN_VAL <- min(long_df$scaledTPM)

# Reformat dataframe:
df_wide_pre_pca_GR <- long_df %>% 
  # filter(VENT_BIN == "Vent") %>% 
  # filter(VENT_FIELD == "Gorda Ridge") %>% 
  filter(NUM_ZERO < 35) %>% 
  unite(SAMPLE, VENT_FIELD, LOCATION, VENT_BIN, sep = "_") %>% 
  group_by(SequenceID, SAMPLE) %>% 
    summarise(MEAN_TPM = mean(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE, values_from = MEAN_TPM, values_fill = MIN_VAL) %>% 
  column_to_rownames(var = "SequenceID")

df_wide_pre_pca_MCR <- long_df %>% 
  filter(VENT_BIN == "Vent") %>% 
  filter(VENT_FIELD == "Von Damm" | VENT_FIELD == "Piccard") %>%
  filter(NUM_ZERO < 35) %>% 
  unite(SAMPLE, VENT_FIELD, LOCATION, VENT_BIN, sep = "_") %>% 
  group_by(SequenceID, SAMPLE) %>% 
    summarise(MEAN_TPM = mean(scaledTPM)) %>% 
  pivot_wider(names_from = SAMPLE, values_from = MEAN_TPM, values_fill = MIN_VAL) %>% 
  column_to_rownames(var = "SequenceID")
```

```{r}
library(compositions)

pca_gr <- prcomp(data.frame(compositions::clr(t(df_wide_pre_pca_GR))))

pca_mcr <- prcomp(data.frame(compositions::clr(t(df_wide_pre_pca_MCR))))

# Determine variance
variance_gr <- (pca_gr$sdev^2)/sum(pca_gr$sdev^2)

variance_mcr <- (pca_mcr$sdev^2)/sum(pca_mcr$sdev^2)
```

```{r}
barplot(variance_gr, main = "GR: Log-Ratio PCA Screeplot", xlab = "PC Axis", ylab = "% Variance", cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
```

scree plot shows first two axes are OK for PCA analysis moving forward. CLR transformed.

```{r}
barplot(variance_mcr, main = "MCR: Log-Ratio PCA Screeplot", xlab = "PC Axis", ylab = "% Variance", cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
```

### PCA Gorda Ridge

```{r}
pc1 <- round(variance_gr[1] * 100, 2)
pc2 <- round(variance_gr[2] * 100, 2)

# create data frame
pca_gr_df <- data.frame((pca_gr$x), row.names(pca_gr$x))

pca_gr_df %>% 
  rownames_to_column(var = "SAMPLE") %>% 
  separate(SAMPLE, c("VENT_FIELD", "LOCATION", "VENT_BIN"), sep = "_", remove = FALSE) %>% 
  ggplot(aes(x = PC1, y = PC2)) +
    # geom_jitter(stroke = 1, size = 4, aes(shape = REGION_ORDER, fill = DEPTH_CATEGORY, color = LIGHT)) +
    geom_jitter(stroke = 1, size = 4, aes(shape = VENT_FIELD, fill = VENT_BIN), color = "black") +
    # scale_shape_manual(values = shape_sample_order_month) +
    scale_shape_manual(values = c(24, 25, 23, 22, 21)) +
    # scale_fill_manual(values = c("#6a51a3", "#f768a1", "#8c96c6", "#fd8d3c", "#238b45")) +
    # scale_fill_manual(values = color_sample_order_month) +
    # scale_color_manual(values = c("#cccccc", "#252525")) +
    theme_linedraw() + coord_fixed(ratio = 1) +
    guides(fill = guide_legend(override.aes = list(shape = c(22)))) +
    geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
    theme(legend.title = element_blank(),
          axis.text = element_text(color = "black", face = "bold", size = 13)) +
    labs(x =  paste(pc1, "%"), y = paste(pc2, "%"))
```

### PCA Mid-Cayman Rise

```{r}
pc1 <- round(variance_mcr[1] * 100, 2)
pc2 <- round(variance_mcr[2] * 100, 2)

# create data frame
pca_mcr_df <- data.frame((pca_mcr$x), row.names(pca_mcr$x))

pca_mcr_df %>% 
  rownames_to_column(var = "SAMPLE") %>% 
  separate(SAMPLE, c("VENT_FIELD", "LOCATION", "VENT_BIN"), sep = "_", remove = FALSE) %>% 
  ggplot(aes(x = PC1, y = PC2)) +
    # geom_jitter(stroke = 1, size = 4, aes(shape = REGION_ORDER, fill = DEPTH_CATEGORY, color = LIGHT)) +
    geom_jitter(stroke = 1, size = 4, aes(shape = VENT_FIELD, fill = VENT_BIN), color = "black") +
    # scale_shape_manual(values = shape_sample_order_month) +
    scale_shape_manual(values = c(24, 25, 23, 22, 21)) +
    # scale_fill_manual(values = c("#6a51a3", "#f768a1", "#8c96c6", "#fd8d3c", "#238b45")) +
    # scale_fill_manual(values = color_sample_order_month) +
    # scale_color_manual(values = c("#cccccc", "#252525")) +
    theme_linedraw() + coord_fixed(ratio = 1) +
    guides(fill = guide_legend(override.aes = list(shape = c(22)))) +
    geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
    theme(legend.title = element_blank(),
          axis.text = element_text(color = "black", face = "bold", size = 13)) +
    labs(x =  paste(pc1, "%"), y = paste(pc2, "%"))
```

\`\`\`{r}

# x-y plot: Number of unique taxa, number of unique KEGG IDs?

Plot these to look at how the number of unique taxa vs. unique KEGG IDs changes for each vent field

# 
